<?php

function ext_form_subscribe_form($form, $form_state)
{
  $form['#prefix'] = '<div id="subscribe-form-wr">';
  $form['#suffix'] = '</div>';

  // если email был подписан успешно, вывести сообщение
  if (isset($form_state["triggering_element"])) {
    $form['message']['#markup'] = '<p class="success-message">' . t('E-mail %email was successfully subscribed!', ['%email' => $form_state['values']['email']]) . '</p>';
  }
  // или форму подписки
  else {
    $form['email'] = [
      '#type' => 'textfield',
      '#attributes' => ['placeholder' => 'E-mail'],
      '#prefix' => '<div class="form-item input-group">',
      '#weight' => -2,
    ];
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => '<i class="icon icon-083"></i>',
      '#attributes' => ['class' => ['btn', 'btn-brand']],
      '#theme_wrappers' => ['button_icon'],
      '#suffix' => '</div>',
      '#weight' => -1,
      '#ajax' => [
        'callback' => 'ext_form_subscribe_form_ajax',
        'wrapper' => 'subscribe-form-wr',
      ],
    ];

    $form['notice'] = [
      '#markup' => '<div class="form-item-fz152-agreement">' . t('Submitting this form you agree with <a href="@url" target="_blank" rel="nofollow">personal data processing policy</a>.', ['@url' => url('privacy-policy')]) . '</div>',
      '#weight' => 1,
    ];
  }

  return $form;
}
function ext_form_subscribe_form_ajax($form, $form_state)
{
  return $form;
}
function ext_form_subscribe_form_validate($form, &$form_state)
{
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error($form_state['values']['email'], t('The entered e-mail address "@email" does not appear valid.', array('@email' => $form_state['values']['email'])));
  }
}
function ext_form_subscribe_form_submit($form, &$form_state)
{
  // проверить наличие Аккаунта,
  // создать Аккаунт и профиль Main, если отсутствует
  $query = db_select('users', 'u')
    ->fields('u', ['uid'])
    ->condition('u.mail', $form_state['values']['email'])
    ->execute();
  if ($result = $query->fetch()) {
    $account = user_load($result->uid);
    $profile_main = profile2_load_by_user($account, 'main');
  } else {
    $new_user = array(
      'name' => user_password(), // будет заменено в hook_insert
      'pass' => user_password(),
      'mail' => $form_state['values']['email'],
      'init' => $form_state['values']['email'],
      'status' => 0,
    );
    $account = user_save(NULL, $new_user);
    $profile_main = profile2_create([
      'type' => 'main',
      'uid' => $account->uid,
    ]);
  }

  if ($profile_main) {
    $profile_main->field_user_subscription_news['und'][0]['value'] = true;
    profile2_save($profile_main);
  }

  $form_state['rebuild'] = true;
}


function ext_form_search_form($form, $form_state)
{
  $form['k'] = [
    '#type' => 'textfield',
    '#attributes' => ['placeholder' => t('search')],
    '#prefix' => '<div class="form-item input-group">'
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => '<i class="icon icon-095"></i>',
    '#attributes' => ['class' => ['btn', 'btn-brand']],
    '#theme_wrappers' => ['button_icon'],
    '#suffix' => '</div>'
  ];

  return $form;
}
function ext_form_search_form_submit($form, $form_state)
{
  drupal_goto('poisk', ['query' => ['k' => $form_state['values']['k']]]);
}

/**
 * Implements hook_form_alter()
 */
function ext_form_form_alter(&$form, &$form_state, $form_id)
{
  // отключить HTML5 валидацию на всех формах
  $form['#attributes']['novalidate'] = '';

  // оформление кнопки
  if (strpos($form_id, 'webform_client_form') === 0) {
    $form["actions"]["submit"]["#attributes"]["class"][] = 'btn-brand';
    $form["actions"]["submit"]["#attributes"]["class"][] = 'btn-wide';
  }

  $form['#after_build'][] = 'ext_form_form_captcha_after_build';

}

/**
 * An after build handler to remove captcha
 */
function ext_form_form_captcha_after_build($form, &$form_state)
{
  // убрать капчу для local сервера
  if (strpos($GLOBALS['base_url'], '.local') !== false) {
    if (isset($form['captcha'])) { unset($form['captcha']); }
    if (isset($form["actions"]["captcha"])) { unset($form["actions"]["captcha"]); }
  }

  // капча внедряется перед кнопкой сабмита, что в случае input-group неверно
  // увеличиваем вес капчи, чтобы поставить её ниже кнопки
  if ($form['#form_id'] == 'ext_form_subscribe_form') {
    $form["captcha"]["#weight"] = 0;
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function ext_form_form_webform_client_form_14_alter(&$form, &$form_state)
{
  // ajax обновление формы отправки заявки
  $form['#prefix'] = '<div id="' . $form["#id"] . '-wrapper">';
  $form['#suffix'] = '</div>';

  $form['actions']['submit']['#ajax'] = [
    'callback' => 'ext_form_webform_client_form_14_ajax_callback',
    'wrapper' => $form["#id"] . '-wrapper',
  ];

  $form["#submit"][] = 'ext_form_rebuild_submit';
}

function ext_form_webform_client_form_14_ajax_callback($form, $form_state)
{
  if (!empty($form["#submission"])) {
    $form['submitted']['complete'] = [
      '#markup' => '<div class="complete"><h4>' . t('Message been sent.') . '</h4></div>',
    ];
  }
  // сбросить сообщение после обновления страницы
  unset($_SESSION["webform_confirmation"]);

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function ext_form_form_webform_client_form_21_alter(&$form, &$form_state)
{
  // ajax обновление формы отправки заявки
  $form['#prefix'] = '<div id="' . $form["#id"] . '-wrapper">';
  $form['#suffix'] = '</div>';

  $form['actions']['submit']['#ajax'] = [
    'callback' => 'ext_form_webform_client_form_21_ajax_callback',
    'wrapper' => $form["#id"] . '-wrapper',
  ];
  $form["actions"]["submit"]["#attributes"]["class"][] = 'btn-full-wide';

  $form["#submit"][] = 'ext_form_rebuild_submit';
}
function ext_form_webform_client_form_21_ajax_callback($form, $form_state)
{
  if (!empty($form["#submission"])) {
    $form['submitted']['complete'] = [
      '#markup' => '<div class="complete">' .
                      '<h4>' . t('Message been sent.') . '</h4>' .
                      '<p>' . t('Our manager will study it and contact you if necessary') . '</p>' .
                    '</div>',
    ];
  }
  // сбросить сообщение после обновления страницы
  unset($_SESSION["webform_confirmation"]);

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function ext_form_form_webform_client_form_23_alter(&$form, &$form_state)
{
  // ajax обновление формы отправки заявки
  $form['#prefix'] = '<div id="' . $form["#id"] . '-wrapper">';
  $form['#suffix'] = '</div>';

  $form['actions']['submit']['#ajax'] = [
    'callback' => 'ext_form_webform_client_form_23_ajax_callback',
    'wrapper' => $form["#id"] . '-wrapper',
  ];

  $form["#submit"][] = 'ext_form_rebuild_submit';
}
function ext_form_webform_client_form_23_ajax_callback($form, $form_state)
{
  if (!empty($form["#submission"])) {
    $form['submitted']['complete'] = [
      '#markup' => '<div class="complete">' .
                     '<h4>' . t('Message been sent.') . '</h4>' .
                    '<p>' . t('As soon as we have a suitable vacancy, we will consider your resume among the first.') . '</p>' .
                   '</div>',
    ];
  }
  // сбросить сообщение после обновления страницы
  unset($_SESSION["webform_confirmation"]);

  return $form;
}

function ext_form_rebuild_submit($form, &$form_state)
{
  $form_state['rebuild'] = TRUE;
}
