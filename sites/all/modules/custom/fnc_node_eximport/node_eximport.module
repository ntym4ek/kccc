<?php

const EXIMPORT_SITE_SOURCE = 'https://kccc.ru';
const EXIMPORT_SITES_DEST = [
  'kz' => ['url' => 'https://kz.kccc.ru', 'label' => 'Казахстан'],
];
const EXIMPORT_CRYPTO_KEY = 'Kccc613048';
const EXIMPORT_PUBLISH_TYPES = ['article', 'blog', 'review', 'video'];          // типы материалов, для которых доступна функция дублирования

/**
 * Implements hook_menu().
 */
function node_eximport_menu()
{
  $items['api/1/eximport'] = array(
    'page callback' => 'node_eximport_import_entity',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_cron_queue_info().
 */
function node_eximport_cron_queue_info()
{
  $queues['eximport_queue'] = [
    'worker callback' => 'node_eximport_process_item',
  ];

  return $queues;
}

function node_eximport_export_entity($entity_type, $eid, $countries)
{
  $entity = entity_load_single($entity_type, $eid);
  $data = [
    'entity_type' => $entity_type,
    'entity' => $entity,
  ];

  // создать задания на отправку массив на сайты
  $queue = DrupalQueue::get('eximport_queue');
  $queue->deleteQueue();
  foreach ($countries as $iso) {
    $queue->createItem(['iso' => $iso, 'data' => $data]);
  }
}

function node_eximport_process_item($args)
{
  // данные нужно зашифровать, во избежание стороннего доступа
  $data = helper_encrypt(EXIMPORT_CRYPTO_KEY, drupal_json_encode($args['data']));

  // определить целевой сайт
  $target_url = EXIMPORT_SITES_DEST[$args['iso']]['url'];

  // сделать запрос
  $result = false;
  if ($target_url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $target_url . '/api/1/eximport');
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(['data' => $data]));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    if ($response = curl_exec($ch)) {
      $arr = drupal_json_decode($response);
      $result = $arr['result'] ?? false;
    }
    curl_close($ch);
  }

  // в случае неудачи, добавить запрос в конец очереди
  if (!$result) {
    watchdog('eximport', 'Неудачный экспорт сущности @entity_type. <pre>@entity_arr</pre>', ['@entity_type' => $args['data']['entity_type'], '@entity_arr' => print_r($args['data']['entity'], true)]);
  }
}

function node_eximport_import_entity()
{
  $result = false;

  if ($_POST['data']) {
    // дешифровать данные
    $json = helper_decrypt(EXIMPORT_CRYPTO_KEY, $_POST['data']);
    $data = drupal_json_decode($json);

    if (isset($data['entity_type'])) {
      $info = entity_get_info($data['entity_type']);
      $prop_info = entity_get_property_info($data['entity_type'])['properties'];
      $entity_orig_arr = $data['entity'];
      $entity_orig_id = $entity_orig_arr[$info["entity keys"]["id"]];

      // создать (если отсутствует) поле и экземпляр для хранения оригинального ID
      if (!field_info_field('field_eximport_entity_id')) {
        $field = [
          'field_name'   => 'field_eximport_entity_id',
          'type'         => 'text',
        ];
        field_create_field($field);
      }
      if (!field_info_instance($data['entity_type'], 'field_eximport_entity_id', $entity_orig_arr[$info["entity keys"]["bundle"]])) {
        $instance = [
          'field_name' => 'field_eximport_entity_id',
          'entity_type' => $data['entity_type'],
          'bundle' => $entity_orig_arr[$info["entity keys"]["bundle"]],
          'label' => t('Original exported entity ID'),
          'type' => 'text',
          'display' => array(
            'default' => array(
              'type' => 'hidden'
            ),
          )
        ];
        field_create_instance($instance);
      }

      // проверка на существование сущности
      $query = new EntityFieldQuery();
      $result = $query
        ->entityCondition('entity_type', $data['entity_type'])
        ->fieldCondition('field_eximport_entity_id', 'value', $entity_orig_id)
        ->execute();
      if (!empty($result[$data['entity_type']])) {
        $entity_id = reset($result[$data['entity_type']])->{$info["entity keys"]["id"]};
        $entity = entity_load_single($data['entity_type'], $entity_id);
      } else {
        $entity_arr = [];

        // скопировать свойства сущности
        foreach ($prop_info as $name => $prop) {
          if (isset($prop['schema field']) && !in_array($name, ['nid', 'vid'])) {
            $entity_arr[$prop['schema field']] = $entity_orig_arr[$prop['schema field']];
          }
        }
        // создать сущность
        $entity = entity_create($data['entity_type'], $entity_arr);
      }

      // скопировать поля
      foreach (field_info_instances($data['entity_type'], $entity_orig_arr[$info["entity keys"]["bundle"]]) as $field_name => $instance) {
        $field_info = field_info_field($field_name);
        // файлов и изображений скачать
        if (in_array($field_info['type'], ['image', 'file'])) {
          foreach ($entity_orig_arr[$field_name] as $lang => $lang_value) {
            foreach ($lang_value as $key => $field) {
              $file_uri = $field["uri"];
              $file_url = str_replace('public://', EXIMPORT_SITE_SOURCE . '/sites/default/files/', $file_uri);
              $entity->{$field_name}[$lang][$key] = (array) system_retrieve_file($file_url, 'temporary://', true);
              $entity->{$field_name}[$lang][$key]['alt'] = $field['alt'];
              $entity->{$field_name}[$lang][$key]['title'] = $field['title'];
            }
          }
        }
        // остальные скопировать
        elseif ($field_name != 'field_eximport_entity_id') {
          $entity->{$field_name} = $entity_orig_arr[$field_name];
        }
      }

      // записать значение оригинального ID
      $entity->field_eximport_entity_id[LANGUAGE_NONE][0]['value'] = $entity_orig_id;

      // сохранить сущность
      $result = (bool) entity_save($data['entity_type'], $entity);

      // node_save (и другие?) не возвращает результат, проверяем по наличию ID
      if (in_array($data['entity_type'], ['node'])) {
        if (!empty($entity->{$info["entity keys"]["id"]})) {
          $result = true;
        }
      }
    }
  }

  if (!$result) {
    watchdog('eximport', 'Неудачный импорт сущности @entity_type. <pre>@entity_arr</pre>', ['@entity_type' => $data['entity_type'], '@data' => print_r($entity_orig_arr, true)]);
    //              watchdog('eximport', 'ссылка @url<br> <pre>@entity_arr</pre>', ['@url' => $file_url, '@entity_arr' => print_r($a, true)]);
  }

  drupal_json_output(['result' => $result]);
  drupal_exit();
}

/**
 * Implements hook_form_FORMID_alter().
 */
function node_eximport_form_node_form_alter(&$form, &$form_state)
{
  // добавить опцию публикации на международные сайты
  // только для базового сайта
  if ($GLOBALS["base_root"] == EXIMPORT_SITE_SOURCE) {
    if (in_array($form["type"]["#value"], EXIMPORT_PUBLISH_TYPES)) {
      $countries = [];
      foreach(EXIMPORT_SITES_DEST as $iso => $value) {
        $countries[$iso] = $value['label'];
      }
      $form["options"]["countries"] = [
        '#type' => 'checkboxes',
        '#title' => 'Опубликовать также на сайтах стран:',
        '#options' => $countries,
      ];

      $form["#submit"][] = 'node_eximport_form_node_form_submit';
    }
  }

  if (!user_has_role(ADMIN_RID)){
    // убрать доступ к полю оригинального ID
    if (isset($form["field_eximport_entity_id"])) {
      $form["field_eximport_entity_id"]["#access"] = false;
    }
  }
}

function node_eximport_form_node_form_submit($form, $form_state)
{
  $countries = [];
  foreach ($form_state['values']['countries'] as $country => $value) {
    if ($value) $countries[] = $country;
  }

  if ($countries) {
    node_eximport_export_entity('node', $form_state["values"]["nid"], $countries);
  }
}
