<?php

/**
 * составляем программу защиты для заданной культуры или списка культур
 * в зависимости от заданных параметров:
 * $parameters['program_id'] или $parameters['culture_id'] - список культур из программы или явно заданная культура
 * $parameters['phase_id'] - фильтр по фазе культуры
 * $parameters['weeds_arr'], $parameters['pests_arr'], $parameters['diseases_arr'] - фильтр по вредным объектам
 * $parameters['desiccants'] - добавить десиканты
 * $parameters['fertilizers'] - добавить удобрения
 *
 * @return array
 *
 */
function _reglaments_get_protection_system($params)
{
  $program = [];
  if (!empty($params['phase_id']) && !is_numeric($params['phase_id'])) unset($params['phase_id']);

  $program_id = $program_wr = null;

  // составляем список регламентов для заданных культур
  if ($params['culture_id']) {
    $culture_wr = entity_metadata_wrapper('node', $params['culture_id']);

    $phase_name = '';
    if (!empty($params['phase_id'])) {
      $phase_wr = entity_metadata_wrapper('taxonomy_term', $params['phase_id']);
      $phase_name = $phase_wr->label();
    }

    // описание программы и ссылка на pdf --------------------------------------
    $program['header'] = [
      'id' => $program_id,
      'title' => !$program_id ? $culture_wr->title->value() : $culture_wr->field_growth_stages_set->label(),
      'description' => !$program_id ? t('Complex crops protection and feed program') : trim(strip_tags($program_wr->body->summary->value())),
      'phase' => $phase_name,
      'pdf' => !$program_id || !$program_wr->field_file_attachments->value() ? '' : $program_wr->field_file_attachments[0]->file->url->value(),
      'area' => empty($params['area']) ? '' : $params['area'],
      'seeding' => empty($params['seeding']) ? '' : $params['seeding'],
    ];

    // todo программа защиты, состоящая из Препаратов,
    //   отсортированных по этапам применения.
    //   Пересекающиеся Регламенты препарата объединены.
    //   А если регламенты не пересекаются?
    $program['stages'] = [];

    // todo найти все Регламенты, подходящие под заданные параметры ------------
    $regls = [];
    $query = db_select('field_data_field_cultures', 'fc');
    $query->addField('fc', 'entity_id');
    $query->condition('fc.bundle', 'field_prep_reglaments');
    $query->condition('fc.field_cultures_target_id', $params['culture_id']);

    // если заданы Вредные объекты
      // для конкретных ВО можно проверить сразу по всем
    $ho_arr = array_merge($params['diseases_arr'], $params['weeds_arr'], $params['pests_arr']);
    if ($ho_arr) {
      $query->leftJoin('field_data_field_hobjects', 'fh', 'fh.entity_id = fc.entity_id');
      $query->condition('fh.field_hobjects_target_id', array_values($ho_arr), 'IN');
    }

    // todo
    //  для Сорняков определить положение в Классификаторе
    //  так как в Регламентах задана и Классификация и отдельные Сорняки
    if ($params['weeds_arr']) {}
    // todo
    //  то же самое для Вредителей
    if ($params['pests_arr']) {}

    if ($result = $query->execute()->fetchCol()) {
      foreach ($result as $regl_id) {
        $regls[$regl_id] = sec_catalog_get_reglament_info($regl_id);
      }
    }

    // todo

  }

  return $program;
}


/**
 * составляем программу защиты для заданной культуры или списка культур
 * в зависимости от заданных параметров:
 * $parameters['program_id'] или $parameters['culture_id'] - список культур из программы или явно заданная культура
 * $parameters['phase_id'] - фильтр по фазе культуры
 * $parameters['weeds_arr'], $parameters['pests_arr'], $parameters['diseases_arr'] - фильтр по вредным объектам
 * $parameters['desiccants'] - добавить десиканты
 * $parameters['fertilizers'] - добавить удобрения
 *
 * @return array
 *
 */
function _reglaments_get_protection_system2($params)
{
    $result = [];
    if (!empty($params['phase_id']) && !is_numeric($params['phase_id'])) unset($params['phase_id']);

    $cultures_ids = [];
    $program_id = $program_wr = null;
    if (!empty($params['program_id'])) {
      $program_id = $params['program_id'];
      $program_wr = entity_metadata_wrapper('node', $program_id);

      if (isset($program_wr->field_pp_cultures)) {
        // массив id культур, для которых берем регламенты
        foreach ($program_wr->field_pp_cultures->raw() as $culture) {
          $cultures_ids[] = $culture;
        }
      }
    } else {
      if (!empty($params['culture_id'])) {
        $cultures_ids[] = $params['culture_id'];

        // найти программу по культуре
//        $query = db_select('field_data_field_pp_cultures', 'fc');
//        $query->condition('fc.field_pp_cultures_target_id', $parameters['culture_id']);
//        $query->addField('fc', 'entity_id');
//        if ($program_id = $query->execute()->fetchField()) {
//            $program_wr = entity_metadata_wrapper('node', $program_id);
//        }
      }
    }
//  watchdog('pp', '<pre>@v</pre>', array('@v' => print_r( $program_wr->value(), TRUE)), WATCHDOG_INFO);
    // составляем список регламентов для заданных культур
    if ($cultures_ids) {
        $reglaments = [];

        $culture_wr = entity_metadata_wrapper('node', $cultures_ids[0]);

        $phase_name = '';
        if (!empty($params['phase_id'])) {
            $phase_wr = entity_metadata_wrapper('taxonomy_term', $params['phase_id']);
            $phase_name = $phase_wr->label();
        }

        // если ВО не заданы, показать всю программу
        $show_full_program = empty($params['weeds_arr']) && empty($params['pests_arr']) && empty($params['diseases_arr']);

        // описание программы и ссылка на pdf
        $result['header'] = array(
          'id'          => $program_id,
          'title'       => !$program_id ? $culture_wr->title->value() : $culture_wr->field_growth_stages_set->label(),
          'description' => !$program_id ? t('Complex crops protection and feed program') : trim(strip_tags($program_wr->body->summary->value())),
          'phase'       => $phase_name,
          'pdf'         => !$program_id || !$program_wr->field_file_attachments->value() ? '' : $program_wr->field_file_attachments[0]->file->url->value(),
          'area'        => empty($params['area']) ? '' : $params['area'],
          'seeding'     => empty($params['seeding']) ? '' : $params['seeding'],
        );

        // иконка
        if ($program_wr) {
            $result['header']['icon'] = $program_wr->field_icon->value() ? $program_wr->field_icon->file->url->value() : '';
        }

        // массив этапов роста
        // выстроить по порядку и поменять местами значения с ключами
//        $stages_arr = array_flip(_get_stages_ordered($culture_wr->field_growth_stages_set->field_mc_periods->value()));

        $stages_arr = [];

        // массив ВО
        $hobjects_all = [
          CAT_HERB_TID => [],
          CAT_INSECT_TID => [],
          CAT_FUNG_TID => [],
          CAT_SEED_TID => [],
        ];
        if (!empty($params['weeds_arr'])) {
          $query = db_select('node', 'n');
          $query->condition('n.nid', $params['weeds_arr'], 'IN');
          $query->fields('n', array('nid', 'title'));
          $hobjects_all[CAT_HERB_TID] = $query->execute()->fetchAllKeyed();

          $herb_term = entity_metadata_wrapper('taxonomy_term', CAT_HERB_TID);
          $result['categories'][$herb_term->weight->value()] = array(
              'tid' => $herb_term->getIdentifier(),
              'weight' => $herb_term->weight->value(),
              'name' => $herb_term->label(),
              'bkg' => $herb_term->field_image_mobile->value() ? $herb_term->field_image_mobile->file->url->value() : '',
              'bkg_desk' => $herb_term->field_shop_category_image->value() ? $herb_term->field_shop_category_image->file->url->value() : '',
              'icon' => $herb_term->field_icon->value() ? $herb_term->field_icon->file->url->value() : '',
          );
        } else $params['weeds_arr'] = [];
        if (!empty($params['pests_arr'])) {
          $query = db_select('node', 'n');
          $query->condition('n.nid', $params['pests_arr'], 'IN');
          $query->fields('n', array('nid', 'title'));
          $hobjects_all[CAT_INSECT_TID] = $query->execute()->fetchAllKeyed();

          $insect_term = entity_metadata_wrapper('taxonomy_term', CAT_INSECT_TID);
          $result['categories'][$insect_term->weight->value()] = array(
              'tid' => $insect_term->getIdentifier(),
              'weight' => $insect_term->weight->value(),
              'name' => $insect_term->label(),
              'bkg' => $insect_term->field_image_mobile->value() ? $insect_term->field_image_mobile->file->url->value() : '',
              'bkg_desk' => $insect_term->field_shop_category_image->value() ? $insect_term->field_shop_category_image->file->url->value() : '',
              'icon' => $insect_term->field_icon->value() ? $insect_term->field_icon->file->url->value() : '',
          );

        } else $params['pests_arr'] = [];
        if (!empty($params['diseases_arr'])) {
          $query = db_select('node', 'n');
          $query->condition('n.nid', $params['diseases_arr'], 'IN');
          $query->fields('n', array('nid', 'title'));
          $hobjects_all[CAT_FUNG_TID] = $hobjects_all[CAT_SEED_TID] = $query->execute()->fetchAllKeyed();

          $fung_term = entity_metadata_wrapper('taxonomy_term', CAT_FUNG_TID);
          $result['categories'][$fung_term->weight->value()] = array(
            'tid' => $fung_term->getIdentifier(),
            'weight' => $fung_term->weight->value(),
            'name' => $fung_term->label(),
            'bkg' => $fung_term->field_image_mobile->value() ? $fung_term->field_image_mobile->file->url->value() : '',
            'bkg_desk' => $fung_term->field_shop_category_image->value() ? $fung_term->field_shop_category_image->file->url->value() : '',
            'icon' => $fung_term->field_icon->value() ? $fung_term->field_icon->file->url->value() : '',
          );
        } else $params['diseases_arr'] = [];

        // массив из которого будем вычёркивать ВО для которых есть решения
        $hobjects_missing = $hobjects_all;

        // массив id регламентов
        $reglaments_ids = [];
        foreach ($cultures_ids as $culture_id) {
          $query = db_select('field_data_field_pd_r_cultures', 'fc');
          $query->fields('fc', array('entity_id'));
          $query->condition('fc.bundle', 'field_pd_reglaments');
          $query->condition('fc.field_pd_r_cultures_target_id', $culture_id);
          $query->leftJoin('field_data_field_pd_reglaments', 'fr', 'fr.field_pd_reglaments_value = fc.entity_id');
          $query->fields('fr', array('entity_id'));
          foreach($query->execute()->fetchAllKeyed() as $rid => $nid) {
              $reglaments_ids[$rid] = $nid;
          }
        }

//        $time[] = microtime(true);
        if ($reglaments_ids) {
            foreach($reglaments_ids as $reglament_id => $preparation_id) {
                $reglament_wr = entity_metadata_wrapper('field_collection_item', $reglament_id);

                $weight = $reglament_wr->field_pd_r_function->weight->value();
                $tid = $reglament_wr->field_pd_r_function->getIdentifier();
                // просматриваем регламенты
                $prep_info = ext_product_product_get_info($preparation_id);


                // уникальный ключ этапа Программы защиты - сочетание id препарата и id функции
                // по этому ключу будет располагаться массив, элементами которого могут быть:
                // 1. один регламент
                // 2. один регламент склеенный из нескольких (пересечение этапов применения)
                // 3. несколько отдельных регламентов (этапы применения не пересекаются)
                // ключом элемента будет порядковый номер этапа роста (установит порядок регламентов)
                $stage_key = $preparation_id . '-' . $tid;

                if ($prep_info['status'] && $reglament_wr->field_pd_rn_period_start->value() && $reglament_wr->field_pd_rn_period_end->value()) {
                    // если заданы ВО, проверить регламенты на соответствие
                    $hobjects = array();

                    $show_category = true;
                    $show_reglament = true;

                    // проверить на соответствие заданной фазе
                    if (!empty($params['phase_id'])) {
                        $phase_order = $stages_arr[$params['phase_id']];
                        $start_order = $stages_arr[$reglament_wr->field_pd_rn_period_start->getIdentifier()];
                        $end_order = $stages_arr[$reglament_wr->field_pd_rn_period_end->getIdentifier()];
                        if ($phase_order < $start_order || $phase_order > $end_order) $show_reglament = false;
                    }

                    switch($reglament_wr->field_pd_r_function->getIdentifier()) {
                        case CAT_HERB_TID:
                            if (!$show_reglament || !$show_full_program && empty($params['weeds_arr'])) $show_category = false;
                            $hobjects = _check_reglament_fits_hobjects($reglament_id, $params['weeds_arr'], CAT_HERB_TID);
                            if (!$show_full_program && !$hobjects) $show_reglament = false;
                            if ($show_reglament) foreach($hobjects as $hoid) unset($hobjects_missing[CAT_HERB_TID][$hoid]);

                            break;
                        case CAT_INSECT_TID:
                            if (!$show_reglament || !$show_full_program && empty($params['pests_arr'])) $show_category = false;
                            $hobjects = _check_reglament_fits_hobjects($reglament_id, $params['pests_arr'], CAT_INSECT_TID);
                            if (!$show_full_program && !$hobjects) $show_reglament = false;
                            if ($show_reglament) foreach($hobjects as $hoid) unset($hobjects_missing[CAT_INSECT_TID][$hoid]);

                            break;
                        case CAT_FUNG_TID:
                        case CAT_SEED_TID:
                            if (!$show_reglament || !$show_full_program && empty($params['diseases_arr'])) $show_category = false;
                            $hobjects = _check_reglament_fits_hobjects($reglament_id, $params['diseases_arr'], CAT_FUNG_TID);
                            if (!$show_full_program && !$hobjects) $show_reglament = false;
                            if ($show_reglament) foreach($hobjects as $hoid) unset($hobjects_missing[CAT_FUNG_TID][$hoid]);

                            break;
                        case CAT_DESIC_TID:
                            // не выводить только если явно отключен
                            // если параметр отсутствует - это системы защиты - выводить
                            if (isset($params['desiccants']) && !$params['desiccants']) $show_reglament = false;
                            // $show_reglament мог быть задан ранее
                            $show_category = $show_reglament;

                            break;
                        case CAT_FERT_TID:
                            // не выводить только если явно отключен
                            // если параметр отсутствует - это системы защиты - выводить
                            if (isset($params['fertilizers']) && !$params['fertilizers']) $show_reglament = false;
                            // $show_reglament мог быть задан ранее
                            $show_category = $show_reglament;

                            break;
                    }

                    // список категорий
                    // категория может быть показана, даже если нет регламентов
                    // чтобы вывести сообщение, что для заданного ВО у нас пока нет препаратов
                    if ($show_category && !isset($result['categories'][$weight])) {
                      $reglament_wr->language('ru');
                      $result['categories'][$weight] = array(
                            'tid' => $tid,
                            'weight' => $weight,
                            'name' => $reglament_wr->field_pd_r_function->label(),
                            'bkg' => $reglament_wr->field_pd_r_function->field_image_mobile->file->url->value() ? $reglament_wr->field_pd_r_function->field_image_mobile->file->url->value() : '',
                            'bkg_desk' => $reglament_wr->field_pd_r_function->field_shop_category_image->value() ? $reglament_wr->field_pd_r_function->field_shop_category_image->file->url->value() : '',
                            'icon' => $reglament_wr->field_pd_r_function->field_icon->value() ? $reglament_wr->field_pd_r_function->field_icon->file->url->value() : '',
                        );
                    }

                    if (!$show_reglament) continue;

                    // заполняем запись нового регламента
                    // инфо о препарате/смеси
                    $title_arr = $ingredients_arr = $rates_arr = $photo_arr = $units_arr = $preparations = [];
                    $index = 0;
                    foreach($prep_info['items'] as $prep_item) {
                      foreach ($prep_item['ingredients'] as $ingredient) {
                        $ingredients_arr[] = $ingredient['full'];
                      }
                        $title_arr[] = $prep_item['title'] . ($prep_item['form_short'] ? ', ' . $prep_item['form_short'] : '');
                        $units_arr[] = $prep_item['unit_short'] . '/' . $prep_item['unit_field'][$tid];
                        $photo_arr[] = image_style_url('medium', $prep_item['photo_uri']);

                        $preparations['items'][$index . '-' . $prep_item['id']] = array(
                            'id' => $prep_item['id'],
                            'title' => $prep_item['title'] . ($prep_item['form_short'] ? ', ' . $prep_item['form_short'] : ''),
                            'photo' => image_style_url('medium', $prep_item['photo_uri']),
                            'photo_medium' => image_style_url('large', $prep_item['photo_uri']),
                            'units' => $prep_item['unit_short'] . '/' . $prep_item['unit_field'][$tid],
                            'unit'  => $prep_item['unit_short'],
                            'unit_field'  => $prep_item['unit_field'],
                            'price' => $prep_item['price'],
                            'order' => $prep_item['order'],
                        );
                        $index++;
                    }
                    $preparations['id'] = $preparation_id;
                    $preparations['title'] = implode(' + ', $title_arr);
                    $preparations['desktop_url'] = '/' . drupal_get_path_alias('node/' . $preparation_id);
                    $preparations['type']  = $prep_info['type'];
                    $preparations['icon'] = $prep_info['icon'];
                    $preparations['ingredients'] = implode(' + ', $ingredients_arr);

                    $regl_new = array(
                        'period' => array(
                            'start' => array(
                                'tid' => $reglament_wr->field_pd_rn_period_start->getIdentifier(),
                                'name' => drupal_strtolower($reglament_wr->field_pd_rn_period_start->label()),
                            ),
                            'end' => array(
                                'tid' => $reglament_wr->field_pd_rn_period_end->getIdentifier(),
                                'name' => drupal_strtolower($reglament_wr->field_pd_rn_period_end->label()),
                            ),
                        ),
                        'preparation' => array(
                            'id' => $preparation_id,
                            'title' => implode(' + ', $title_arr),
                            'type'  => $prep_info['type'],
                            'ingredients' => implode(' + ', $ingredients_arr),
                            'photo' => $photo_arr,
                            'icon' => $prep_info['icon'],
                        ),
                        'preparations' => $preparations,
                        'hobjects' => $hobjects,
//                        'description' => $reglament_wr->field_pd_r_processing->value(),
                        'state' => empty($params['area']) ? 'off' : 'on',
                    );

                    // так как норма расхода связана с препаратом в БС порядковым номером
                    // а get_product_info возвращает БС в определенном порядке (не по порядковому номеру)
                    // связать нормы с препаратом по полю order
                    foreach($reglament_wr->field_pd_r_prep_rate as $key_r => $rate_wr) {
                        $index = 0;
                        foreach($prep_info['items'] as $prep_item) {
                            if ($prep_item['order'] == $key_r) {
                                $regl_new['preparations']['items'][$index . '-' . $prep_item['id']]['rate'] = array(
                                    'from'  => (float)$rate_wr->from->value(),
                                    'to'    => (float)$rate_wr->to->value(),
                                    'unit'  => $units_arr[$index],
                                );
                            }
                            $index++;
                        }
                    }

                    // для препаратов кроме смесей
                    // проверить на наличие регламентов на этом этапе ПЗ
                    // и склеить старый и новый регламенты при наличии пересечения.
                    // проверить все регламенты на этапе, в теории возможно неоднократное склеивание
                    if (!empty($reglaments[$tid]['stages'][$stage_key])) {
                        foreach ($reglaments[$tid]['stages'][$stage_key] as $key => $regl_old) {
                          if (_reglaments_merge_crossing_periods2($stages_arr, $regl_new, $regl_old)) {
                                unset($reglaments[$tid]['stages'][$stage_key][$key]);
                            }
                        }
                    }

                    // вычислить длительность периода регламента
                    $regl_new['period']['duration'] = $stages_arr[$regl_new['period']['end']['tid']] - $stages_arr[$regl_new['period']['start']['tid']] + 1;

                    // ключ регламента в массиве этапа ПЗ
                    $regl_key = $stages_arr[$regl_new['period']['start']['tid']];

                    // записываем регламент в этап ПЗ
                    $reglaments[$tid]['stages'][$stage_key][$regl_key] = $regl_new;
                }
            }
        }
    }

    if (!empty($result['categories'])) {

        // записать в результаты неизлечимые ВО
        foreach ($result['categories'] as $weight => $value) {
            if ($value['tid'] == CAT_HERB_TID && !empty($hobjects_missing[CAT_HERB_TID]))       $result['categories'][$weight]['hobjects'] = implode(', ', $hobjects_missing[CAT_HERB_TID]);
            if ($value['tid'] == CAT_INSECT_TID && !empty($hobjects_missing[CAT_INSECT_TID]))   $result['categories'][$weight]['hobjects'] = implode(', ', $hobjects_missing[CAT_INSECT_TID]);
            if ($value['tid'] == CAT_FUNG_TID && !empty($hobjects_missing[CAT_FUNG_TID]))       $result['categories'][$weight]['hobjects'] = implode(', ', $hobjects_missing[CAT_FUNG_TID]);
            if ($value['tid'] == CAT_SEED_TID && !empty($hobjects_missing[CAT_FUNG_TID]))    $result['categories'][$weight]['hobjects'] = implode(', ', $hobjects_missing[CAT_FUNG_TID]);

            // todo о наличии hobjects_missing нужно рапортовать по email
        }

        // формируем итоговый массив
        // массив поделен на категории
        // в категориях этапы содержат элементы с ключами:
        // stages[номер начального этапа роста][длительность этапа роста]
        foreach ($result['categories'] as $weight => $value) {
            if (!empty($reglaments[$value['tid']]['stages'])) {
                foreach ($reglaments[$value['tid']]['stages'] as $key_s => $stage) {
                    $hobjects_names_arr = [];
                    foreach ($stage as $start => $regl) {
                        // преобразовать массив ВО в строку
                        if ($regl['hobjects']) {
                            foreach ($regl['hobjects'] as $ho) {
                              $hobjects_names_arr[] = $hobjects_all[$value['tid']][$ho];
                            }
                            $regl['hobjects'] = implode(', ', array_unique($hobjects_names_arr));
                        }
                        $result['categories'][$weight]['stages'][$start][$stage[$start]['period']['duration']][$key_s] = $regl;
                    }
                }
                if ($result['categories'][$weight]['stages']) ksort($result['categories'][$weight]['stages']);
            }
        }


        ksort($result['categories']);
    }

//    $time[] = (microtime(true) - $time[0]) * 1000;
    return $result;
}

/**
 * добавить в программу текущее состояние формы
 */
function _set_program_states($program, $states)
{
  foreach ($states['categories'] as $key_cat => $cat) {
    if (isset($cat['cnt'])) {
      $program['categories'][$key_cat]['cnt'] = $cat['cnt'];

      foreach ($cat['stages'] as $key_stage => $stage) {
        foreach ($stage as $key_set => $set) {
          foreach ($set as $key_reg => $regl) {
            if (isset($regl['state']) && $regl['state'] == 'on') {
              if (isset($program['categories'][$key_cat]['stages'][$key_stage][$key_set][$key_reg])) {
                $program['categories'][$key_cat]['stages'][$key_stage][$key_set][$key_reg]['state'] = $regl['state'];

                foreach ($regl['preparations']['items'] as $key_prep => $prep) {
                  if (isset($prep['rate']['default'])) {
                    $program['categories'][$key_cat]['stages'][$key_stage][$key_set][$key_reg]['preparations']['items'][$key_prep]['rate']['default'] = $prep['rate']['default'];
                  }
                }
              } else {
                if ($program['categories'][$key_cat]['cnt'] > 0) $program['categories'][$key_cat]['cnt'] = $program['categories'][$key_cat]['cnt'] - 1;
              }
            }
          }
        }
      }
    }
  }

  return $program;
}

/**
 * вернуть массив этапов роста культуры в последовательном порядке
 */
function _get_stages_ordered($stages)
{
    $result = [];
    foreach($stages as $key=>$stage) {
        $result[$key] = $stage->tid;
    }

    return $result;
}

/**
 * вернуть массив этапов роста культуры в последовательном порядке
 */
function _check_reglament_fits_hobjects($reglament_id, $hobject_ids, $type)
{
    $reglament_wr = entity_metadata_wrapper('field_collection_item', $reglament_id);

    // проверка видов
    $hobjects = array_intersect($reglament_wr->field_pd_a_hobjects->raw(), $hobject_ids);

    switch ($type) {
        case CAT_HERB_TID:
            // получить список родительских категорий регламента
            $weeds_reglament_groups_arr = [];
            foreach($reglament_wr->field_pd_a_weeds_groups as $key_g => $weeds_group_wr) {
                foreach($weeds_group_wr->field_pd_a_wg_class as $weeds_class_wr) {
                    $weeds_reglament_groups_arr[$key_g]['tree'][] = $weeds_class_wr->getIdentifier();
                }
                foreach($weeds_group_wr->field_pd_a_wg_life_time as $weeds_life_time_wr) {
                    $weeds_reglament_groups_arr[$key_g]['time'][] = $weeds_life_time_wr->getIdentifier();
                }
            }
            // проверка объекта на вхождение в полученный массив
            foreach($hobject_ids as $hobject_id) {
                $weed_wr = entity_metadata_wrapper('node', $hobject_id);
                foreach($weeds_reglament_groups_arr as $weeds_reglament_group) {
                    // проверить лайфтайм
                    if (isset($weeds_reglament_group['time']) && in_array($weed_wr->field_weed_life_time->getIdentifier(), $weeds_reglament_group['time']) || !isset($weeds_reglament_group['time'])) {
                        $weed_parent_groups = taxonomy_get_parents_all($weed_wr->field_weed_kind->getIdentifier());
                        // проверить иерархию
                        foreach ($weed_parent_groups as $weed_parent_group) {
                            if (in_array($weed_parent_group->tid, $weeds_reglament_group['tree'])) $hobjects[] = $hobject_id;
                        }
                    }
                }
            }

            break;

        case CAT_INSECT_TID:
            // получить список родительских категорий регламента
            $pests_reglament_groups_arr = [];
            foreach($reglament_wr->field_pd_a_pests_groups as $pests_group_wr) {
                $pests_reglament_groups_arr[] = $pests_group_wr->getIdentifier();
            }
            // проверка категорий
            foreach($hobject_ids as $hobject_id) {
                $pest_wr = entity_metadata_wrapper('node', $hobject_id);
                $pest_parent_groups = taxonomy_get_parents_all($pest_wr->field_pest_classificator->getIdentifier());
                foreach($pest_parent_groups as $pest_parent_group) {
                    if (in_array($pest_parent_group->tid, $pests_reglament_groups_arr)) $hobjects[] = $hobject_id;
                }
            }

            break;
    }

    $hobjects = array_unique($hobjects);

    return $hobjects;
}

/**
 * функция возвращает true, если к $regl1 присоединен $regl2
 * и false в случае отсутствия изменений
 *
 */
function _reglaments_merge_crossing_periods2($stages_arr, &$regl1, $regl2)
{
    $r1_start_num   = $stages_arr[$regl1['period']['start']['tid']];
    $r1_end_num     = $stages_arr[$regl1['period']['end']['tid']];
    $r2_start_num   = $stages_arr[$regl2['period']['start']['tid']];
    $r2_end_num     = $stages_arr[$regl2['period']['end']['tid']];


  // если второй регламент пересекается с первым по периоду применения
    // или расположен сразу за или перед ним - склеить
    if ($r1_end_num + 1 >= $r2_start_num && $r1_start_num - 1 <= $r2_end_num) {
        if ($r2_end_num > $r1_end_num) $regl1['period']['end']['tid'] = $regl2['period']['end']['tid'];
        if ($r2_start_num < $r1_start_num) $regl1['period']['start']['tid'] = $regl2['period']['start']['tid'];
        foreach ($regl1['preparations']['items'] as $key_prep => $preparation) {
            if ($regl2['preparations']['items'][$key_prep]['rate']['from'] < $regl1['preparations']['items'][$key_prep]['rate']['from']) {
                $regl1['preparations']['items'][$key_prep]['rate']['from'] = $regl2['preparations']['items'][$key_prep]['rate']['from'];
            }
            if ($regl2['preparations']['items'][$key_prep]['rate']['to'] > $regl1['preparations']['items'][$key_prep]['rate']['to']) {
                $regl1['preparations']['items'][$key_prep]['rate']['to'] = $regl2['preparations']['items'][$key_prep]['rate']['to'];
            }
        }

        $regl1['hobjects'] = array_merge($regl1['hobjects'], $regl2['hobjects']);

        return true;
    }

    return false;
}

