<?php

/**
 * составляем программу защиты для заданной культуры или списка культур
 * в зависимости от заданных параметров:
 * $parameters['program_id'] или $parameters['culture_id'] - список культур из программы или явно заданная культура
 * $parameters['stage_id'] - фильтр по этапу роста культуры
 * $parameters['hobjects'] - фильтр по вредным объектам
 * $parameters['desiccants'] - добавить десиканты
 * $parameters['fertilizers'] - добавить удобрения
 *
 * @return array
 *
 */
function _reglaments_get_protection_system($params)
{
  $program = [];
  if (!empty($params['stage_id']) && !is_numeric($params['stage_id'])) unset($params['stage_id']);

  // если ВО не заданы, показать всю программу
  $show_full_program = empty($params['hobjects'][CAT_WEED]) && empty($params['hobjects'][CAT_DISEASE]) && empty($params['hobjects'][CAT_PEST]);

  $program_id = $program_wr = null;

  // составляем список регламентов для заданных культур
  if ($params['culture_id']) {
    $culture_wr = entity_metadata_wrapper('node', $params['culture_id']);

    if (!empty($params['stage_id'])) {
      $stage_info = helper_get_term_info($params['stage_id']);
    }

    // описание программы и ссылка на pdf --------------------------------------
    $program['header'] = [
      'id' => $program_id,
      'title' => !$program_id ? $culture_wr->title->value() : $culture_wr->field_growth_stages_set->label(),
      'description' => !$program_id ? t('Complex crops protection and feed program') : trim(strip_tags($program_wr->body->summary->value())),
      'stage' => isset($stage_info) ? $stage_info['label'] : '',
      'pdf' => !$program_id || !$program_wr->field_file_attachments->value() ? '' : $program_wr->field_file_attachments[0]->file->url->value(),
      'area' => empty($params['area']) ? '' : $params['area'],
      'seed' => empty($params['seed']) ? '' : $params['seed'],
    ];

    //  программа защиты из Препаратов, со списком регламентов, подходящих заданным условиям
    // todo
    //  Cортировка по этапам применения.
    //  Объединение пересекающихся Регламентов.
    $program['preps'] = [];

    // найти все Регламенты для Культуры с привязкой в Препарату и Категории ---
    $preps_w_regls_temp = [];
    $query = db_select('field_data_field_cultures', 'fc');
    $query->addField('fc', 'entity_id', 'rid');
    $query->condition('fc.bundle', 'field_prep_reglaments');
    $query->condition('fc.field_cultures_target_id', $params['culture_id']);
    $query->innerJoin('field_data_field_prep_reglaments', 'fr', 'fr.field_prep_reglaments_value = fc.entity_id');
    $query->addField('fr', 'entity_id', 'nid');
    $query->innerJoin('field_data_field_prep_category', 'fpc', 'fpc.entity_id = fr.entity_id');
    $query->addField('fpc', 'field_prep_category_tid', 'tid');
    if ($result = $query->execute()->fetchAll()) {
      // сформировать массив Препаратов с Регламентами и Категорией
      foreach ($result as $item) {
        $preps_w_regls_temp[$item->nid]['cat'] = $item->tid;
        $preps_w_regls_temp[$item->nid]['regls'][] = $item->rid;
      }

      // массив со всеми ВО
      $hobjects_all = $params['hobjects'];

      // массив с ВО, для которых нет решений,
      // будем вычёркивать ВО для которых есть
      $hobjects_missing = $params['hobjects'];

      //  проверить Регламенты на соответствие заданным ВО
      //  и определить список этих ВО
      $preps_w_regls = [];
      foreach ($preps_w_regls_temp as $prep_id => $prep) {
        foreach ($prep['regls'] as $regl_id) {
          // определить для каких ВО подходит Регламент
          $hobjects = [];
          if (!empty($hobjects_all[_prep_cat_to_hobject_cat($prep['cat'])])) {
            $hobjects = _check_reglament_fits_hobjects($regl_id, $hobjects_all[_prep_cat_to_hobject_cat($prep['cat'])], $prep['cat']);
          }

          // определить соответствие выбранному Этапу роста, если он задан
          if (empty($params['stage_id']) || _check_reglament_fits_stage($regl_id, $params['stage_id'])) {
            if (($show_full_program || $hobjects)
                && ($prep['cat'] != CAT_DESIC_TID || $params['desiccants'])
                && ($prep['cat'] != CAT_FERT_TID || $params['fertilizers']))
            {
              $product_info = sec_catalog_get_product_info($prep_id);
              if (!isset($preps_w_regls[$prep_id])) {
                $preps_w_regls[$prep_id] = [
                  'info' => $product_info,
                  'regls' => [],
                ];
              }
              $regl = sec_catalog_get_reglament_info($regl_id);
              $regl = sec_catalog_get_reglament_info_formatted($regl, $product_info, ['area' => $params['area'], 'seed' => $params['seed']]);
              $preps_w_regls[$prep_id]['regls'][$regl_id] = [
                'info' => $regl,
                'hobjects' => _get_entities_info($hobjects)
              ];

              // убрать ВО, для которых есть регламент из массива не найденных
              if ($hobjects) {
                $hobjects_missing[_prep_cat_to_hobject_cat($prep['cat'])] = array_diff($hobjects_missing[_prep_cat_to_hobject_cat($prep['cat'])], $hobjects);
              }
            }
          }
        }
      }

      $program['preps'] = $preps_w_regls;
      $ho_missing = [];
      foreach($hobjects_missing as $category) {
        $ho_missing = array_unique(array_merge($ho_missing, $category));
      }
      $program['hobjects'][CAT_WEED]    = _get_entities_info($params['hobjects'][CAT_WEED]);
      $program['hobjects'][CAT_DISEASE]  = _get_entities_info($params['hobjects'][CAT_DISEASE]);
      $program['hobjects'][CAT_PEST]    = _get_entities_info($params['hobjects'][CAT_PEST]);
      $program['hobjects']['missing']       = _get_entities_info(array_values($ho_missing));
    }
  }

  return $program;
}

/**
 * Вернуть категорию ВО соответствующую категории Препарата
 */
function _prep_cat_to_hobject_cat($cat_id)
{
  if ($cat_id == CAT_HERB_TID) return CAT_WEED;
  if ($cat_id == CAT_SEED_TID) return CAT_DISEASE;
  if ($cat_id == CAT_FUNG_TID) return CAT_DISEASE;
  if ($cat_id == CAT_INSECT_TID) return CAT_PEST;

  return 0;
}

/**
 * Вернуть по списку ID массив сущностей с ID и Наименованием
 * и форматированую строку списка
 */
function _get_entities_info($entities)
{
  if (empty($entities)) return [];

  $entities_list = $entities_arr = [];
  foreach ($entities as $hid) {
    $ho_wr = entity_metadata_wrapper('node', $hid);
    $entities_list[$hid] = [
      'id' => $ho_wr->getIdentifier(),
      'label' => $ho_wr->label(),
    ];
    $entities_arr[] = $ho_wr->label();
  }
  $entities_formatted = implode(', ', $entities_arr);

  return [
    'raw' => $entities,
    'list' => $entities_list,
    'formatted' => drupal_ucfirst(drupal_strtolower($entities_formatted)),
  ];
}

/**
 * Вернуть из заданного списка Вредных объектов те,
 * для которых подходит указанный Регламент.
 * Заданы конкретные ВО, а в Регламенте могут быть заданы группы и отдельные ВО.
 */
function _check_reglament_fits_hobjects($regl_id, $hobject_ids, $type)
{
  $regl_wr = entity_metadata_wrapper('field_collection_item', $regl_id);

  // проверка заданных в Регламенте конкретных ВО
  $hobjects = array_intersect($regl_wr->field_hobjects->raw(), $hobject_ids);

  // проверка по заданным в Регламенте группам ВО
  switch ($type) {
    case CAT_HERB_TID:
      // получить список родительских категорий регламента
      $weed_groups_arr = [];
      foreach($regl_wr->field_reg_weed_groups as $key_g => $weed_group_wr) {
        foreach($weed_group_wr->field_reg_weed_classes as $weed_class_wr) {
          $weed_groups_arr[$key_g]['tree'][] = $weed_class_wr->getIdentifier();
        }
        foreach($weed_group_wr->field_reg_weed_lifes as $weed_life_wr) {
          $weed_groups_arr[$key_g]['time'][] = $weed_life_wr->value();
        }
      }
      // проверка объекта на вхождение в полученный массив
      foreach($hobject_ids as $hobject_id) {
        $weed_wr = entity_metadata_wrapper('node', $hobject_id);
        foreach($weed_groups_arr as $weed_group) {
          // проверить лайфтайм
          if (isset($weed_group['time']) && in_array($weed_wr->field_hb_weed_life->value(), $weed_group['time']) || !isset($weed_group['time'])) {
            $weed_parent_groups = taxonomy_get_parents_all($weed_wr->field_classificator_flora->getIdentifier());
            // проверить иерархию
            foreach ($weed_parent_groups as $weed_parent_group) {
              if (in_array($weed_parent_group->tid, $weed_group['tree'])) $hobjects[] = $hobject_id;
            }
          }
        }
      }

      break;

    case CAT_INSECT_TID:
      // получить список родительских категорий регламента
      $pest_groups_arr = [];
      foreach($regl_wr->field_reg_pest_classes as $pest_group_wr) {
        $pest_groups_arr[] = $pest_group_wr->getIdentifier();
      }
      // проверка категорий
      foreach($hobject_ids as $hobject_id) {
        $pest_wr = entity_metadata_wrapper('node', $hobject_id);
        $pest_parent_groups = taxonomy_get_parents_all($pest_wr->field_classificator_fauna->getIdentifier());
        foreach($pest_parent_groups as $pest_parent_group) {
          if (in_array($pest_parent_group->tid, $pest_groups_arr)) $hobjects[] = $hobject_id;
        }
      }

      break;
  }

  $hobjects = array_unique($hobjects);

  return $hobjects;
}

/**
 * Проверить, соответствует ли Регламент заданному Этапу роста
 */
function _check_reglament_fits_stage($regl_id, $stage_id)
{
  $result = false;
  $regl_info = sec_catalog_get_reglament_info($regl_id);
  $stage_info = helper_get_term_info($stage_id);

  if (!empty($regl_info["period"]["start"])
    && $regl_info["period"]["start"]['weight'] <= $stage_info['weight']
    && $regl_info["period"]["end"]['weight'] >= $stage_info['weight']
  ) {
    return true;
  }

  return $result;
}
