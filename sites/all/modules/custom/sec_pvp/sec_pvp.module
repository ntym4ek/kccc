<?php

const PVP_PER_PAGE = 12;

function sec_pvp_menu()
{
  $items['preparaty-v-pole'] = array(
    'title' => 'Products in the fields',
    'description' => t('Products in use experience'),
    'page callback' => 'sec_pvp_list_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );

  return $items;
}

function sec_pvp_theme()
{
  return [
    'pvp_teaser' => [
      'variables' => ['item' => null],
      'template' => 'templates/pvp-teaser',
    ],
    'pvp_event_check' => [
      'variables' => ['event' => null, 'pvp_info' => null],
      'template' => 'templates/pvp-event-check',
    ],
    'pvp_event_treat' => [
      'variables' => ['event' => null, 'pvp_info' => null],
      'template' => 'templates/pvp-event-treat',
    ],
  ];
}

function sec_pvp_list_page()
{
  $pvp_page = $_GET['page'] ?? 0;

  $form = drupal_get_form('sec_pvp_filters_form');
  $filters = $form['#data']['filters'];
  $content = sec_pvp_get_content_filtered($filters, PVP_PER_PAGE, $pvp_page);
  $query = helper_get_query_from_filters('preparaty-v-pole', $filters);
  $pager = theme('custom_pager', ['query' => $query, 'total' => $content['total'], 'per_page' => PVP_PER_PAGE]);

  $view = [
    'id' => 'pvp',
    'classes' => 'view view-pvp',
    'exposed' => drupal_render($form),
    'content' => $content['output'],
    'pager' => $pager,
  ];
  $output = theme('custom_view', ['view' => $view]);

  return $output;
}

function sec_pvp_get_content_filtered($filters, $pvp_per_page, $pvp_page_num = 0)
{
  $content = [
    'output' => '',
  ];

  if ($pvps = sec_pvp_get_pvp_filtered($filters, $pvp_per_page, $pvp_page_num*$pvp_per_page)) {
    $content['total'] = $pvps['total'];
    foreach ($pvps['list'] as $pvp_teaser) {
      $content['output'] .= '<div class="view-row col-xs-12 col-md-6 col-lg-4 col-xl-3">';
      $content['output'] .=   theme('pvp_teaser', ['item' => $pvp_teaser]);
      $content['output'] .= '</div>';
    }
  } else {
    $content['output'] .= '<div class="view-empty">';
    $content['output'] .=  t('No records found, try changing the filters.');
    $content['output'] .= '</div>';
  }

  return $content;
}

/**
 * Вернуть заданное число тизеров Препаратов в поле и их общее количество.
 * Можно задать фильтры.
 *
 * @param $filters
 * @param $qty - количество записей
 * @param $from - начиная с записи
 */
function sec_pvp_get_pvp_filtered($filters, $qty = null, $from = 0)
{
  $pvps = [
    'list' => [],
    'sorted' => [],               // сортировка для мобильного приложения
  ];

  // список ПвП с сортировкой по дате обновления
  $dbr = db_select('node', 'n');
  $dbr->condition('n.status', 1);
  $dbr->condition('n.type', 'season');
  $dbr->addField('n', 'nid');
  // поле для сортировки по дате последнего события
  $dbr->leftJoin('field_data_field_pvp_last_event_date', 'frled', 'frled.entity_id = n.nid');
  // фильтр по Автору
  if ($filters['user']['current_id']) {
    $dbr->condition('n.uid', $filters['user']['current_id']);
  }
  // есть Контроль
  $dbr->innerJoin('field_data_field_pvp_check', 'fpc', 'fpc.entity_id = n.nid');
  if ($filters['region']['current_id']) {
    $dbr->innerJoin('field_data_field_region', 'fr', 'fr.entity_id = n.nid');
    $dbr->condition('fr.field_region_tid', $filters['region']['current_id']);
  }
  if ($filters['culture']['current_id']) {
    $dbr->innerJoin('field_data_field_culture', 'fc', 'fc.entity_id = n.nid');
    $dbr->condition('fc.field_culture_target_id', $filters['culture']['current_id']);
  }
  if ($filters['preparation']['current_id']) {
    $dbr->innerJoin('field_data_field_pvp_treat', 'ft', 'ft.entity_id = n.nid');
    $dbr->innerJoin('field_data_field_pvp_treat_preparations', 'fps', 'fps.entity_id = ft.field_pvp_treat_value');
    $dbr->innerJoin('field_data_field_preparation', 'fp', 'fp.entity_id = fps.field_pvp_treat_preparations_value');
    $dbr->condition('fp.field_preparation_target_id', $filters['preparation']['current_id']);
  }
  if ($filters['component']['current_id']) {
    $dbr->innerJoin('field_data_field_pvp_treat', 'ft', 'ft.entity_id = n.nid');
    $dbr->innerJoin('field_data_field_pvp_treat_preparations', 'fps', 'fps.entity_id = ft.field_pvp_treat_value');
    $dbr->innerJoin('field_data_field_preparation', 'fp', 'fp.entity_id = fps.field_pvp_treat_preparations_value');
    $dbr->innerJoin('field_data_field_prep_components', 'fpcoms', 'fpcoms.entity_id = fp.field_preparation_target_id');
    $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.entity_id = fpcoms.field_prep_components_value');
    $dbr->condition('fpcom.field_component_tid', $filters['component']['current_id']);
  }
  $dbr->distinct();
  $dbr_n = clone($dbr);
  if ($pvps['total'] = count($dbr->execute()->fetchAll())) {
    $dbr_n->orderBy('frled.field_pvp_last_event_date_value', 'DESC');
    if ($qty) $dbr_n->range($from, $qty);
    $pvp_nids = $dbr_n->execute()->fetchCol();

    foreach ($pvp_nids as $pvp_nid) {
      $pvps['list'][$pvp_nid] = sec_pvp_get_pvp_teaser($pvp_nid);
    }

    $pvps['sorted'] = $pvp_nids;
  }

  return $pvps;
}

/**
 * Вернуть массив информации для вывода тизера ПвП в списке
 */
function sec_pvp_get_pvp_teaser($pvp_nid)
{
  $teaser = &drupal_static(__FUNCTION__ . $pvp_nid);
  if (!isset($teaser)) {
    $pvp_wr = entity_metadata_wrapper('node', $pvp_nid);

    if ($pvp_wr->value()) {
      $teaser = [
        'id' => $pvp_wr->getIdentifier(),
        'label' => $pvp_wr->label(),
        'region' => $pvp_wr->field_region->label(),
        'culture' => $pvp_wr->field_culture->label(),
        'path' => url('node/' . $pvp_wr->getIdentifier()),
        'comment' => t('Before treatment'),
        'filters' => [                                              // набор фильтров текущей записи
          'user' => $pvp_wr->author->uid->value(),                  // используется для локальной фильтрации записей в Приложении
          'region' => $pvp_wr->field_region->getIdentifier(),
          'culture' => $pvp_wr->field_culture->getIdentifier(),
          'preparations' => [],
          'components' => [],
        ],
      ];

      // для короткого формата найти последнее событие
      // и последнюю обработку (используется в комментарии обработки и контроля)
      $event_id = $event_date = 0;
      // а также собрать все применяемые Препараты и ДВ
      $preparations = $components = [];
      // найти последний Контроль
      foreach ($pvp_wr->field_pvp_check->getIterator() as $check_wr) {
        if ($check_wr->field_datetime->value() > $event_date) {
          $event_date = $check_wr->field_datetime->value();
          $event_id = $check_wr->getIdentifier();
        }
      }
      // найти последнюю Обработку
      $treat_id = $date = 0;
      foreach ($pvp_wr->field_pvp_treat->getIterator() as $treat_wr) {
        if ($treat_wr->field_datetime->value() > $date) {
          $date = $treat_wr->field_datetime->value();
          $treat_id = $treat_wr->getIdentifier();
        }
        if ($treat_wr->field_datetime->value() > $event_date) {
          $event_date = $treat_wr->field_datetime->value();
          $event_id = $treat_wr->getIdentifier();
        }
        // применённые препараты
        foreach ($treat_wr->field_pvp_treat_preparations->getIterator() as $treat_preparation_wr) {
          $preparations[$treat_preparation_wr->field_preparation->getIdentifier()] = $treat_preparation_wr->field_preparation->label(); // в Сезоне id 2155 возвращает строковые идентификаторы, что ломает приложение
          foreach ($treat_preparation_wr->field_preparation->field_prep_components->getIterator() as $component_wr) {
            $components[$component_wr->field_component->getIdentifier()] = $component_wr->field_component->label();
          }
        }
      }
      $teaser['filters']['preparations'] = array_unique($preparations);
      $teaser['filters']['components'] = array_unique($components);

      if ($event_id) {
        $event_wr = entity_metadata_wrapper('field_collection_item', $event_id);
        if ($event_wr->getBundle() == 'field_pvp_check') {
          $teaser += [
            'type' => 'check',
            'date' => date('d.m.Y', $event_wr->field_datetime->value()),
            'photo' => image_style_url('teaser', $event_wr->field_pvp_check_culture_images[0]->file->value()->uri),
          ];
        } else {
          $teaser += [
            'type' => 'treat',
            'date' => date('d.m.Y', $event_wr->field_datetime->value()),
            'photo' => image_style_url('teaser', $event_wr->field_pvp_treat_images[0]->file->value()->uri),
          ];
        }

        if ($treat_id) {
          $treat_wr = entity_metadata_wrapper('field_collection_item', $treat_id);

          // получить список препаратов из последней Обработки
          $preps = [];
          foreach ($treat_wr->field_pvp_treat_preparations->getIterator() as $tp_wr) {
            $preps[] = $tp_wr->field_preparation->label();
          }
          if ($preps) {
            $teaser['comment'] = ($teaser['type'] == 'check' ? t('After treatment with products') : t('Treatment with products:')) . '<span>' . implode(', ', $preps) . '</span>';
          } else {
            $teaser['comment'] = t('Treatment has been carried out');
          }
        }
      }
    }
  }

  return $teaser;
}

/**
 * Вернуть информацию о записи ПвП
 */
function sec_pvp_get_pvp_info($pvp_nid)
{
  $pvp = &drupal_static(__FUNCTION__ . $pvp_nid);
  if (!isset($pvp)) {
    try {
      $pvp_wr = entity_metadata_wrapper('node', $pvp_nid);

      if ($pvp_wr->value()) {
        $pvp = [
          'id' => $pvp_wr->getIdentifier(),
          'label' => $pvp_wr->label(),
          'season' => $pvp_wr->field_pvp_season->value(),
          'year' => $pvp_wr->field_pvp_year->value(),
          'uid' => $pvp_wr->author->uid->value(),
          'field' => [
            'owner' => $pvp_wr->field_pvp_field_owner->value(),
            'area' => $pvp_wr->field_pvp_field_area->value(),
            'region' => [
              'id' => $pvp_wr->field_region->getIdentifier(),
              'label' => $pvp_wr->field_region->label(),
            ],
          ],
          'culture' => [
            'id' => $pvp_wr->field_culture->getIdentifier(),
            'label' => $pvp_wr->field_culture->label(),
            'note' => $pvp_wr->field_pvp_culture_note->value(),
            'satellite' => $pvp_wr->field_pvp_culture_satellite->value(),
            'previous' => $pvp_wr->field_pvp_culture_previous->value(),
          ],
          'events' => [],
        ];

        $events = [];
        // записи Контроля
        foreach ($pvp_wr->field_pvp_check->getIterator() as $check_wr) {
          $event = [
            'id' => $check_wr->getIdentifier(),
            'type' => 'check',
            'date' => $check_wr->field_datetime->value(),
            'culture' => [
              'comment' => is_array($check_wr->field_pvp_check_culture_comment->value()) ? $check_wr->field_pvp_check_culture_comment->value->value() : $check_wr->field_pvp_check_culture_comment->value(),
              'photos' => [],
            ],
            'hobjects' => [
              'comment' => is_array($check_wr->field_pvp_check_hobjects_comment->value()) ? $check_wr->field_pvp_check_hobjects_comment->value->value() : $check_wr->field_pvp_check_hobjects_comment->value(),
              'list' => [],
            ],
          ];
          foreach ($check_wr->field_pvp_check_culture_images->getIterator() as $cp_wr) {
            $event['culture']['photos'][] = [
              'photo_uri' => $cp_wr->file->value()->uri,
              'note' => $cp_wr->title->value(),
            ];
          }
          foreach ($check_wr->field_pvp_check_hobjects->getIterator() as $ch_wr) {
            $ho = [
              'id' => $ch_wr->field_hobject->getIdentifier(),
              'label' => $ch_wr->field_hobject->label(),
              'type' => $ch_wr->field_hobject->type->value(),
            ];
            if ($ch_wr->field_image->value()) {
              $ho['photo_uri'] = $ch_wr->field_image->file->value()->uri;
              $ho['note'] = $ch_wr->field_image->title->value();
            }
            $event['hobjects']['list'][] = $ho;
          }

          // при одинаковой дате сортируем по ID
          $events[$event['date'] . str_pad($event['id'], 6, '0', STR_PAD_LEFT)] = $event;
        }

        // записи Обработок
        foreach ($pvp_wr->field_pvp_treat->getIterator() as $treat_wr) {
          $event = [
            'id' => $treat_wr->getIdentifier(),
            'type' => 'treat',
            'date' => $treat_wr->field_datetime->value(),
            'comment' => is_array($treat_wr->field_comment->value()) ? $treat_wr->field_comment->value->value() : $treat_wr->field_comment->value(),
            'preparations' => [],
            'photos' => [],
            'mix_spend' => $treat_wr->field_pvp_treat_mix_spend->value(),
          ];
          foreach ($treat_wr->field_pvp_treat_preparations->getIterator() as $tp_wr) {
            $event['preparations'][] = [
              'preparation' => [
                'id' => $tp_wr->field_preparation->getIdentifier(),
                'label' => $tp_wr->field_preparation->label(),
              ],
              'prep_spend' => $tp_wr->field_prep_spend->value(),
            ];
          }
          foreach ($treat_wr->field_pvp_treat_images->getIterator() as $tps_wr) {
            $event['photos'][] = [
              'photo_uri' => $tps_wr->file->value()->uri,
              'note' => $tps_wr->title->value(),
            ];
          }
          // при одинаковой дате сортируем по ID
          $events[$event['date'] . str_pad($event['id'], 6, '0', STR_PAD_LEFT)] = $event;
        }
      }

      ksort($events);
      $pvp['events'] = $events;
    } catch (Exception $e) {
      $a = 1;
    }
  }

  return $pvp;
}

/**
 * Implements hook_preprocess_hook()
 */
function sec_pvp_preprocess_pvp_event_check(&$vars)
{
  sec_pvp_prepare_event_view($vars['event'], $vars['pvp_info']);
}


/**
 * Implements hook_preprocess_hook()
 */
function sec_pvp_preprocess_pvp_event_treat(&$vars)
{
  sec_pvp_prepare_event_view($vars['event'], $vars['pvp_info']);
}

/**
 * подготовить переменные События сезона в выводу
 */
function sec_pvp_prepare_event_view(&$event, $pvp)
{
  $event['date_formatted'] = date('d.m.Y', $event['date']);

  if ($event['type'] == 'check') {
    // добавляем стилизованные фото и тег alt
    foreach ($event['culture']['photos'] as $key => $item) {
      $event['culture']['photos'][$key]['image_teaser'] = image_style_url('teaser', $item['photo_uri']);
      $event['culture']['photos'][$key]['image'] = file_create_url($item['photo_uri']);
      $event['culture']['photos'][$key]['image_alt'] = $pvp['culture']['label'];
    }
    $hos = [];
    foreach ($event['hobjects']['list'] as $item) {
      if (!empty($item['photo_uri'])) {
        $event['hobjects']['photos'][] = [
          'image_teaser' => image_style_url('teaser', $item['photo_uri']),
          'image' => file_create_url($item['photo_uri']),
          'image_alt' => $item['label'],
          'label' => $item['label'],
          'note' => $item['label'] . '. ' . $item['note'],
        ];
      }
      $hos[] = '<a href="' . url('node/' . $item['id']) . '" target="_blank">' . $item['label'] . '</a>';
    }
    // список ВО без фото
    if ($hos) {
      $event['hobjects']['list_formatted'] = implode(', ', $hos);
    }
  } else {
    // добавляем стилизованные фото и тег alt
    foreach ($event['photos'] as $key => $item) {
      $event['photos'][$key]['image_teaser'] = image_style_url('teaser', $item['photo_uri']);
      $event['photos'][$key]['image'] = file_create_url($item['photo_uri']);
      $event['photos'][$key]['image_alt'] = t('Treatment with products') . ' ' . variable_get('site_name');
    }

    if ($event['preparations']) {
      $treat_unit_apply = '';
      foreach ($event['preparations'] as $key => $item) {
        $product_info = sec_catalog_get_product_info($item['preparation']['id']);
        $treat_unit_apply = $product_info['units']['apply'];
        if (!empty($item['old_mix_spend'])) {
          $summary = '<div class="prep-spend">' . t('Mix spend') . ': <span>' . helper_number_format($item['old_mix_spend'], 2) . '</span> ' . $product_info['units']['short'] . '/' . $product_info['units']['apply'] . '</div>';
        }
        else {
          $summary = (float) $item['prep_spend'] ? '<div class="prep-spend">' . t('Product spend') . ': <span>' . helper_number_format($item['prep_spend'], 2) . '</span> ' . $product_info['units']['short'] . '/' . $product_info['units']['apply'] . '</div>' : '';
        }

        $card = [
          'id' => $product_info['id'],
          'title' => $product_info['title'],
          'label' => $product_info['label'],
          'path' => $product_info['path'],
          'image' => $product_info['image'],
          'components' => $product_info['components'],
          'summary' => $summary,
        ];
        $event['preparations'][$key]['preparation'] = $card;
        $event['preparations'][$key]['preparation']['rendered'] = theme('card_product_h', ['product' => $card]);
      }

      $event['title'] = count($event['preparations']) > 1 ? t('Tank mix') : t('Product');
      $event['mix_spend_formatted'] = !empty($event['mix_spend']) ? '<div class="spend">' . t('Tank mix spend') . ': <span>' . helper_number_format($event['mix_spend'], 2) . '</span> ' . t('l', [], ['context' => 'units']) . '/' . $treat_unit_apply . '</div>' : '';
    }
  }
}



function sec_pvp_get_filters_default()
{
  return [
    'user'        => ['current_id' => 0, 'options' => []],  // используется как фильтр в ПвП
    'region'      => ['current_id' => 0, 'options' => []],  // используется как фильтр в ПвП
    'culture'     => ['current_id' => 0, 'options' => []],  // используется как фильтр в ПвП
    'preparation' => ['current_id' => 0, 'options' => []],  // используется в блоке Опыты применения в препарате
    'component'   => ['current_id' => 0, 'options' => []],  // используется как фильтр в ПвП
  ];
}
/**
 * Вернуть массив возможных значений фильтров ПвП и выбранные значения
 */
function sec_pvp_get_filters_set()
{
  $key = drupal_hash_base64($_GET['q']);
  $filters = &drupal_static(__FUNCTION__ . $key);
  if (!isset($filters)) {

    $filters = sec_pvp_get_filters_default();

    // Пользователь
    $curr_user_id = null;
    if ($_GET['q'] == 'system/ajax' && isset($_POST["user"])) {
      $curr_user_id = $_POST["user"];
    }
    elseif (isset($_GET['user']) && is_numeric($_GET['user'])) {
      $curr_user_id = $_GET['user'];
    }
    $filters['user']['current_id'] = $curr_user_id;

    // Регионы
    $curr_reg_id = null;
    $filters['region']['options'] = sec_pvp_get_regions($filters);
    if ($_GET['q'] == 'system/ajax' && isset($_POST["region"])) {
      $curr_reg_id = $_POST["region"];
    }
    elseif (isset($_GET['region']) && is_numeric($_GET['region'])) {
      $curr_reg_id = $_GET['region'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($filters['region']['options'][$curr_reg_id])) {
      $filters['region']['current_id'] = $curr_reg_id;
    }

    // Культуры
    $curr_cult_id = null;
    $filters['culture']['options'] = sec_pvp_get_filter_cultures($filters);
    if ($_GET['q'] == 'system/ajax' && isset($_POST["culture"])) {
      $curr_cult_id = $_POST["culture"];
    }
    elseif (isset($_GET['culture']) && is_numeric($_GET['culture'])) {
      $curr_cult_id = $_GET['culture'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($filters['culture']['options'][$curr_cult_id])) {
      $filters['culture']['current_id'] = $curr_cult_id;
    }

    // Препарат
    $curr_prep_id = null;
    $filters['preparation']['options'] = sec_pvp_get_filter_preparations($filters);
    if ($_GET['q'] == 'system/ajax' && isset($_POST["preparation"])) {
      $curr_prep_id = $_POST["preparation"];
    }
    elseif (isset($_GET['preparation']) && is_numeric($_GET['preparation'])) {
      $curr_prep_id = $_GET['preparation'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($filters['preparation']['options'][$curr_prep_id])) {
      $filters['preparation']['current_id'] = $curr_prep_id;
    }

    // Действующие вещества
    $curr_comp_id = null;
    $filters['component']['options'] = sec_pvp_get_filter_components($filters);
    if ($_GET['q'] == 'system/ajax' && isset($_POST["component"])) {
      $curr_comp_id = $_POST["component"];
    }
    elseif (isset($_GET['component']) && is_numeric($_GET['component'])) {
      $curr_comp_id = $_GET['component'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($filters['component']['options'][$curr_comp_id])) {
      $filters['component']['current_id'] = $curr_comp_id;
    }

  }

  return $filters;
}

/**
 * Вернуть массив с Регионами из ПвП
 */
function sec_pvp_get_regions($filters)
{
  $regions = [];

  $dbr = db_select('taxonomy_term_data', 't');
  $dbr->condition('t.vid', taxonomy_vocabulary_machine_name_load('regions')->vid);
  $dbr->innerJoin('field_data_field_region', 'fr', 'fr.field_region_tid = t.tid');
  $dbr->innerJoin('node', 'n', 'n.nid = fr.entity_id');
  $dbr->condition('n.type', 'season');
  $dbr->condition('n.status', 1);
  $dbr->orderBy('t.name');
  $dbr->fields('t', ['tid', 'name']);

  if ($filters['user']['current_id']) {
    $dbr->condition('n.uid', $filters['user']['current_id']);
  }

  if ($items = $dbr->execute()->fetchAll()) {
    foreach ($items as $item) {
      $regions[$item->tid] = $item->name;
    }
  }

  return $regions;
}

/**
 * Вернуть массив Культур из ПвП с учётом заданной фильтрации
 */
function sec_pvp_get_filter_cultures($filters)
{
  $cultures = [];

  $dbr = db_select('node', 'n');
  $dbr->condition('n.type', 'culture');
  $dbr->innerJoin('field_data_field_culture', 'fc', 'fc.field_culture_target_id = n.nid');
  $dbr->innerJoin('node', 'ns', 'ns.nid = fc.entity_id');
  $dbr->condition('ns.type', 'season');
  $dbr->condition('ns.status', 1);

  if ($filters['user']['current_id']) {
    $dbr->condition('ns.uid', $filters['user']['current_id']);
  }

  if ($filters['region']['current_id']) {
    $dbr->innerJoin('field_data_field_region', 'fr', 'fr.entity_id = fc.entity_id');
    $dbr->condition('fr.field_region_tid', $filters['region']['current_id']);
  }
  $dbr->orderBy('n.title');
  $dbr->fields('n', ['nid', 'title']);
  if ($items = $dbr->execute()->fetchAll()) {
    foreach ($items as $item) {
      $cultures[$item->nid] = $item->title;
    }
  }

  return $cultures;
}


/**
 * Вернуть массив Препаратов из ПвП с учётом заданной фильтрации
 */
function sec_pvp_get_filter_preparations($filters)
{
  $preps = [];

  $dbr = db_select('node', 'n');
  $dbr->innerJoin('field_data_field_preparation', 'fp', 'fp.field_preparation_target_id = n.nid');
  $dbr->condition('fp.bundle', 'field_pvp_treat_preparations');
  $dbr->innerJoin('field_data_field_pvp_treat_preparations', 'fps', 'fps.field_pvp_treat_preparations_value = fp.entity_id');
  $dbr->innerJoin('field_data_field_pvp_treat', 'ft', 'ft.field_pvp_treat_value = fps.entity_id');
  $dbr->innerJoin('node', 'ns', 'ns.nid = ft.entity_id');
  $dbr->condition('ns.status', 1);

  if ($filters['user']['current_id']) {
    $dbr->condition('ns.uid', $filters['user']['current_id']);
  }

  // если задан Регион
  if ($filters['region']['current_id']) {
    $dbr->innerJoin('field_data_field_region', 'fr', 'fr.entity_id = ft.entity_id');
    $dbr->condition('fr.bundle', 'season');
    $dbr->condition('fr.field_region_tid', $filters['region']['current_id']);
  }

  // если задана Культура
  if ($filters['culture']['current_id']) {
    $dbr->innerJoin('field_data_field_culture', 'fc', 'fc.entity_id = ft.entity_id');
    $dbr->condition('fc.bundle', 'season');
    $dbr->condition('fc.field_culture_target_id', $filters['culture']['current_id']);
  }
  $dbr->orderBy('n.title');
  $dbr->fields('n', ['nid', 'title']);
  if ($items = $dbr->execute()->fetchAll()) {
    foreach ($items as $item) {
      $preps[$item->nid] = $item->title;
    }
  }

  return $preps;
}

/**
 * Вернуть массив ДВ из ПвП с учётом заданной фильтрации
 */
function sec_pvp_get_filter_components($filters)
{
  $components = [];

  $dbr = db_select('taxonomy_term_data', 't');
  $dbr->condition('t.vid', taxonomy_vocabulary_machine_name_load('preparation_components')->vid);

  $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.field_component_tid = t.tid');
  $dbr->innerJoin('field_data_field_prep_components', 'fpcoms', 'fpcoms.field_prep_components_value = fpcom.entity_id');
  $dbr->innerJoin('node', 'n', 'n.nid = fpcoms.entity_id');
  $dbr->innerJoin('field_data_field_preparation', 'fp', 'fp.field_preparation_target_id = n.nid');
  $dbr->condition('fp.bundle', 'field_pvp_treat_preparations');
  $dbr->innerJoin('field_data_field_pvp_treat_preparations', 'fps', 'fps.field_pvp_treat_preparations_value = fp.entity_id');
  $dbr->innerJoin('field_data_field_pvp_treat', 'ft', 'ft.field_pvp_treat_value = fps.entity_id');
  $dbr->innerJoin('node', 'ns', 'ns.nid = ft.entity_id');
  $dbr->condition('ns.status', 1);

  if ($filters['user']['current_id']) {
    $dbr->condition('ns.uid', $filters['user']['current_id']);
  }

  // если задан Регион
  if ($filters['region']['current_id']) {
    $dbr->innerJoin('field_data_field_region', 'fr', 'fr.entity_id = ft.entity_id');
    $dbr->condition('fr.bundle', 'season');
    $dbr->condition('fr.field_region_tid', $filters['region']['current_id']);
  }

  // если задана Культура
  if ($filters['culture']['current_id']) {
    $dbr->innerJoin('field_data_field_culture', 'fc', 'fc.entity_id = ft.entity_id');
    $dbr->condition('fc.bundle', 'season');
    $dbr->condition('fc.field_culture_target_id', $filters['culture']['current_id']);
  }

  // если задана Препарат
  if ($filters['preparation']['current_id']) {
    $dbr->condition('n.nid', $filters['preparation']['current_id']);
  }

  $dbr->orderBy('t.name');
  $dbr->fields('t', ['tid', 'name']);
  if ($items = $dbr->execute()->fetchAll()) {
    foreach ($items as $item) {
      $components[$item->tid] = $item->name;
    }
  }

  return $components;
}

function sec_pvp_filters_form($form, &$form_state)
{
  $form['filters'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['row']],
  ];

  // Формируем Фильтры только один раз в форме, так как здесь часть из них может быть сброшена.
  // Далее нужно пользоваться сохранёнными в $from или $form_state
  $filters = sec_pvp_get_filters_set();
  // если за изменённым фильтром есть другие, то их нужно сбросить
  if (isset($form_state['filters'])) {
    $flag = false;
    foreach($filters as $name => $filter) {
      if (!$flag) {
        $flag = ((isset($_GET[$name]) && $form_state['filters'][$name]['current_id'] != $_GET[$name])
              || (isset($_POST[$name]) && $form_state['filters'][$name]['current_id'] != $_POST[$name]));
      } else {
        $filters[$name]['current_id'] = 0;
      }
    }
  }
  // запоминаем фильтры
  $form_state['filters'] = $filters;
  // через форму будем передавать фильтры в функцию формирования контента
  $form['#data']['filters'] = $filters;
  // сбрасываем установленные значения фильтров формы, установим ниже с учётом сброшенных
  unset($form_state["input"]);

  $form['filters']['user'] = [
    '#type' => 'hidden',
    '#value' => $filters['user']['current_id'],
  ];

  $form['filters']['region'] = [
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => [0 => t('All')] + $filters['region']['options'],
    '#default_value' => $filters['region']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-xl-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_pvp_filters_form_ajax',
    ],
  ];

  $form['filters']['culture'] = [
    '#type' => 'select',
    '#title' => t('Culture'),
    '#options' => [0 => t('All')] + $filters['culture']['options'],
    '#default_value' => $filters['culture']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-xl-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_pvp_filters_form_ajax',
    ],
  ];

  $form['filters']['preparation'] = [
    '#type' => 'select',
    '#title' => t('Product'),
    '#options' => [0 => t('All')] + $filters['preparation']['options'],
    '#default_value' => $filters['preparation']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-xl-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_pvp_filters_form_ajax',
    ],
  ];

  $form['filters']['component'] = [
    '#type' => 'select',
    '#title' => t('Component'),
    '#options' => [0 => t('All')] + $filters['component']['options'],
    '#default_value' => $filters['component']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-xl-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_pvp_filters_form_ajax',
    ],
  ];


  return $form;
}

function sec_pvp_filters_form_ajax($form, $form_state)
{
  // Фильтры берём из формы, так как они могут быть в ней изменены
  $filters = $form['#data']['filters'];
  $content = sec_pvp_get_content_filtered($filters, PVP_PER_PAGE, $_GET['page'] ?? 0);
  $query = helper_get_query_from_filters('preparaty-v-pole', $filters);
  $pager = theme('custom_pager', ['query' => $query, 'total' => $content['total'], 'per_page' => PVP_PER_PAGE]);

  $view = [
    'id' => 'pvp',
    'classes' => 'view view-pvp',
    'exposed' => drupal_render($form),
    'content' => $content['output'],
    'pager' => $pager,
  ];
  $commands[] = ajax_command_replace('#pvp', theme('custom_view', ['view' => $view]));

  // определить новый URL, которому соответствует содержимое страницы
  // URL будет установлен в адресную строку браузера через history.pushState
  $url = '/' . $query['q'];
  $parameters = drupal_get_query_parameters($query);
  if ($parameters) $url .= '?' . drupal_http_build_query($parameters);
  $setting['history']['url'] = $GLOBALS['base_url'] . $url;
  $commands[] = ajax_command_settings($setting);

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function sec_pvp_form_node_form_alter(&$form, &$form_state, $form_id)
{
  if ($form["#form_id"] == 'season_node_form') {
    // изменить поле Сезон
    $form["field_pvp_season"]["und"][0]["value"]["#type"] = 'select';
    $form["field_pvp_season"]["und"][0]["value"]["#size"] = 1;
    $form["field_pvp_season"]["und"][0]["value"]["#options"] = [
      'Весна' => 'Весна',
      'Осень' => 'Осень',
    ];

    // поле Год
    $form["field_pvp_year"]["und"][0]["value"]['#element_validate'][] = 'sec_pvp_form_year_validate';
    $form["field_pvp_year"]["und"][0]["value"]["#description"] = 'формат: 20xx';

    // убрать поля с формы
    $form["field_text"]["#access"] = false;       // старый ID
    $form["field_pvp_last_event_date"]["#access"] = false;
    $form["title"]["#access"] = false;
    $form["author"]["#access"] = false;
    $form["options"]["promote"]["#access"] = false;
    $form["options"]["sticky"]["#access"] = false;

    // изменение оформления
    $form["field_pvp_check"]["und"]["add_more"]["#value"] = 'Добавить новый контроль';
    $form["field_pvp_treat"]["und"]["add_more"]["#value"] = 'Добавить новую обработку';

    foreach($form["field_pvp_check"]["und"] as $key => &$item) {
      if (is_numeric($key) && isset($item["remove_button"])) {
        $item["remove_button"]["#value"] = 'Удалить контроль';
      }
      if (isset($item["field_pvp_check_hobjects"]["und"]["add_more"])) {
        $item["field_pvp_check_hobjects"]["und"]["add_more"]['#value'] = 'Добавить вредный объект';
      }
      if (isset($item["field_pvp_check_culture_images"]["und"]["#file_upload_title"])) {
        $item["field_pvp_check_culture_images"]["und"]["#file_upload_title"] = 'Добавить фото';
      }
    }
    foreach($form["field_pvp_treat"]["und"] as $key => &$item) {
      if (is_numeric($key) && isset($item["remove_button"])) {
        $item["remove_button"]["#value"] = 'Удалить обработку';
      }
      if (isset($item["field_pvp_treat_preparations"]["und"]["add_more"])) {
        $item["field_pvp_treat_preparations"]["und"]["add_more"]['#value'] = 'Добавить препарат';
      }
      if (isset($item["field_pvp_treat_images"]["und"]["#file_upload_title"])) {
        $item["field_pvp_treat_images"]["und"]["#file_upload_title"] = 'Добавить фото';
      }
    }

    $form["#submit"][] = 'sec_pvp_form_node_form_submit';
  }
}

function sec_pvp_form_year_validate($form, &$form_state)
{
  if (!is_numeric($form_state["values"]["field_pvp_year"]["und"][0]["value"]) || strlen($form_state["values"]["field_pvp_year"]["und"][0]["value"]) != 4) {
    form_set_error('field_pvp_year][und][0][value', 'Некорректно указан год. Введите в формате: 20xx');
  }
}

function sec_pvp_form_node_form_submit($form, &$form_state)
{
  $when = $form_state["values"]["field_pvp_season"]["und"][0]["value"] . ' ' . $form_state["values"]["field_pvp_year"]["und"][0]["value"];
  $what = $form_state["input"]["field_culture"]["und"][0]["target_id"];
  $where = trim(str_replace('-', '', $form["field_region"]["und"]["#options"][$form_state["values"]["field_region"]["und"][0]["tid"]]));

  $form_state["values"]["title"] = $when . '. ' . $what . '. ' . $where;
}


/**
 * Вернуть массив с последним событием ПвП
 */
function sec_pvp_get_last_pvp_event($pvp_id)
{
  $pvp_wr = entity_metadata_wrapper('node', $pvp_id);

  $event_id = $event_date = 0;
  // найти последний Контроль
  foreach ($pvp_wr->field_pvp_check->getIterator() as $check_wr)
    if ($check_wr->field_datetime->value() > $event_date) {
      $event_date = $check_wr->field_datetime->value();
      $event_id = $check_wr->getIdentifier();
    }
  // найти последнюю Обработку или Контроль
  foreach ($pvp_wr->field_pvp_treat->getIterator() as $treat_wr) {
    if ($treat_wr->field_datetime->value() > $event_date) {
      $event_date = $treat_wr->field_datetime->value();
      $event_id = $treat_wr->getIdentifier();
    }
  }

  return $event_id ? ['id' => $event_id, 'datetime' => $event_date] : false;
}

/**
 * Implements hook_preprocess_page().
 */
function sec_pvp_preprocess_page(&$vars)
{
  if ($_GET['q'] == 'preparaty-v-pole') {
    if (isset($_GET['user'])) {
      if ($user_info = ext_user_get_user_info($_GET['user'])) {
        $vars['is_title_on'] = TRUE;
        $title = $user_info["label"] . ' ' . $user_info["main"]["name_short"];
        $vars['title'] = '';
        $vars['title_suffix'] = theme('card_contact', $user_info);
        drupal_set_title($vars['banner_title'] . '. ' . $title);
      }
    }
  }
}

/**
 * Implements hook_node_presave()
 */
function sec_pvp_node_presave($node)
{
  if ($node->type == 'season') {
    // обновить дату последнего события
    $event_date = 0;
    if (!empty($node->field_pvp_check["und"])) {
      foreach ($node->field_pvp_check["und"] as $check) {
        if (!empty($check['field_datetime']['und']) && $check['field_datetime']['und'][0]['value'] > $event_date) {
          $event_date = $check['field_datetime']['und'][0]['value'];
        }
      }
    }
    if (!empty($node->field_pvp_treat["und"])) {
      foreach ($node->field_pvp_treat["und"] as $treat) {
        if (!empty($treat['field_datetime']['und']) && $treat['field_datetime']['und'][0]['value'] > $event_date) {
          $event_date = $treat['field_datetime']['und'][0]['value'];
        }
      }
    }
    if ($event_date) {
      $node->field_pvp_last_event_date['und'][0]['value'] = $event_date;
    }
  }
}

