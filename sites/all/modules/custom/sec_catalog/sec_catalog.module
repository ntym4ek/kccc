<?php

define('CAT_HERB_TID',    1);
define('CAT_FUNG_TID',    2);
define('CAT_INSECT_TID',  3);
define('CAT_DESIC_TID',   5);
define('CAT_SEED_TID',    4);
define('CAT_FERT_TID',    6);
define('CAT_OTHER_TID',  406);

/**
 * Implements hook_menu().
 */
function sec_catalog_menu()
{
  $items['katalog'] = [
    'title' => 'Catalog',
    'page callback' => 'sec_catalog_page',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  ];

  // заглушки для создания Контекстного меню
  $items['preparation/description'] = [
    'title' => 'Description',
    'page callback' => 'dumb',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['preparation/pvp'] = [
    'title' => 'Products in the fields',
    'page callback' => 'dumb',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['preparation/media'] = [
    'title' => 'Media',
    'page callback' => 'dumb',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['preparation/files'] = [
    'title' => 'Files',
    'page callback' => 'dumb',
    'access arguments' => ['access content'],
    'type' => MENU_NORMAL_ITEM,
  ];

  return $items;
}

/**
 * Implements hook_translated_menu_link_alter().
 */
function sec_catalog_translated_menu_link_alter(&$item, $map)
{
  // В меню "Контекстное меню" в разделе для Препарата
  // динамически меняем ссылки-заглушки на нужные нам
  if ($item["menu_name"] == 'menu-context') {
    if ($item["href"] == 'preparation/description') {
      $item['href'] = drupal_get_path_alias($_GET["q"]);
    }
    if ($item["href"] == 'preparation/pvp') {
      $item['href'] = drupal_get_path_alias($_GET["q"]) . '/primenenie';
    }
    if ($item["href"] == 'preparation/media') {
      $item['href'] = drupal_get_path_alias($_GET["q"]) . '/media';
    }
    if ($item["href"] == 'preparation/files') {
      $item['href'] = drupal_get_path_alias($_GET["q"]) . '/faily';
    }
  }
}

/**
 * Implements hook_url_inbound_alter().
 */
function sec_catalog_url_inbound_alter(&$path, $original_path, $path_language)
{
  // Собственный обработчик преобразования внешней ссылки во внутреннюю.
  // Несуществующий в системе адрес вида(1):    katalog/категория/препарат/секция
  // преобразуем в(2):                          katalog/категория/препарат?s=секция,
  // который далее уже системой может быть распознан и преобразуется в node/%?s=секция.
  // Будет открыта страница препарата с параметром,
  // хотя в адресной строке браузера будет указан начальный адрес (1)
  // Далее, в зависимости от параметра будет выводиться разный контент:
  // описание, опыт применения, медиа и документы
  if (arg(0, $path) == 'katalog') {
    if ($section = arg(3, $path)) {
      $new_path = str_replace('/' . $section, '', $path);
      $path = drupal_get_normal_path($new_path);
      $_GET['s'] = $section;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function sec_catalog_preprocess_page(&$vars)
{
  if (arg(0) == 'katalog') {
    // вывод Заголовка в виде баннера
    $vars['is_banner_on'] = true;
    $vars['is_title_on'] = false;
    $img_uri = 'public://images/page-banners/katalog.jpg';

    // Заголовок
    $banner_title = 'Каталог продукции';
    if (arg(1)) {
      if ($category_id = sec_catalog_get_category_id_by_name(arg(1))) {
        if ($cat_info = sec_catalog_get_category_info($category_id)) {
          $banner_title = $cat_info['title'];
          if ($cat_info['icon_num']) {
            $banner_title = '<i class="icon icon-' . $cat_info['icon_num'] . '"></i>' . $banner_title;
          }
          if ($cat_info['banner']['uri']) {
            $img_uri = $cat_info['banner']['uri'];
          }
        }
      }
    }
    $vars['banner_title'] = $banner_title;

    $vars['banner_url'] = file_create_url($img_uri);
    $vars['banner_mobile_url'] = image_style_url('banner_mobile', $img_uri);
  }
}

function sec_catalog_page()
{
  $form = drupal_get_form('sec_catalog_filters_form');
  $filters = $form['#data']['filters'];
  $content = sec_catalog_get_content_filtered($filters);

  $view = [
    'id' => 'catalog',
    'classes' => 'view view-catalog',
    'exposed' => drupal_render($form),
    'content' => $content,
  ];

  return theme('custom_view', ['view' => $view]);
}

function sec_catalog_get_content_filtered($filters)
{
  $content = '';

  if ($catalog = sec_catalog_get_products_filtered($filters)) {
    foreach ($catalog as $category) {
      foreach ($category['products'] as $product_info) {
        $content .= '<div class="view-row col-xs-12 col-md-6">';
        $content .=   theme('card_product_h', $product_info);
        $content .= '</div>';
      }
    }
  } else {
    $content .= '<div class="view-empty">';
//    $content .=  'Препаратов не найдено, попробуйте изменить фильтры.';
    $content .=  t('No products were found, try changing the filters.');
    $content .= '</div>';
  }

  return $content;
}

function sec_catalog_filters_form($form, &$form_state)
{
  $form['filters'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['row']],
  ];

  // Формируем Фильтры только один раз в форме, так как здесь часть из них может быть сброшена.
  // Далее нужно пользоваться сохранёнными в $from или $form_state
  $filters = sec_catalog_get_filters_set();
  // если за изменённым фильтром есть другие, то их нужно сбросить
  if (isset($form_state['filters'])) {
    $flag = false;
    foreach($filters as $name => $filter) {
      if (!$flag) {
        $flag = ((isset($_GET[$name]) && $form_state['filters'][$name]['current_id'] != $_GET[$name])
          || (isset($_POST[$name]) && $form_state['filters'][$name]['current_id'] != $_POST[$name]));
      } else {
        $filters[$name]['current_id'] = 0;
      }
    }
  }
  // запоминаем фильтры
  $form_state['filters'] = $filters;
  // через форму будем передавать фильтры в функцию формирования контента
  $form['#data']['filters'] = $filters;
  // сбрасываем установленные значения фильтров формы, установим ниже с учётом сброшенных
  unset($form_state["input"]);

  $cat_options = [0 => t('All')];
  foreach ($filters['category']['options'] as $id => $label) {
    $cat_options[$id] = $label;
  }
  $form['filters']['category'] = [
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => $cat_options,
    '#default_value' => $filters['category']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-lg-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_catalog_filters_form_ajax',
    ],
  ];

  $cmp_options = [0 => t('All')];
  foreach ($filters['component']['options'] as $id => $label) {
    $cmp_options[$id] = $label;
  }
  $form['filters']['component'] = [
    '#type' => 'select',
    '#title' => t('Component'),
    '#options' => $cmp_options,
    '#default_value' => $filters['component']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-lg-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_catalog_filters_form_ajax',
    ],
  ];

  $cultures_options = [0 => t('All')];
  foreach ($filters['culture']['options'] as $id => $label) {
    $cultures_options[$id] = $label;
  }
  $form['filters']['culture'] = [
    '#type' => 'select',
    '#title' => t('Culture'),
    '#options' => $cultures_options,
    '#default_value' => $filters['culture']['current_id'],
    '#prefix' => '<div class="col-xs-12 col-md-6 col-lg-3">',
    '#suffix' => '</div>',
    '#ajax' => [
      'wrapper' => '',
      'callback' => 'sec_catalog_filters_form_ajax',
    ],
  ];

  return $form;
}

function sec_catalog_filters_form_ajax($form, $form_state)
{
  // Фильтры берём из формы, так как они могут быть в ней изменены
  $filters = $form['#data']['filters'];
  $query = helper_get_query_from_filters('katalog', $filters);
  $content = sec_catalog_get_content_filtered($filters);

  $view = [
    'id' => 'catalog',
    'classes' => 'view view-catalog',
    'exposed' => drupal_render($form),
    'content' => $content,
  ];
  $commands[] = ajax_command_replace('#catalog', theme('custom_view', ['view' => $view]));

  // определить Заголовок, Баннер, Иконку
  $title = t('Products catalog');
  $title_icon = '';
  $banner_uri = 'public://images/page-banners/katalog.jpg';

  // определить новый URL, которому соответствует содержимое страницы
  // URL будет установлен в адресную строку браузера через history.pushState
  $url = '/' . $query['q'];

  if ($filters['category']['current_id']) {
    if ($cat_info = sec_catalog_get_category_info($filters['category']['current_id'])) {
      // фильтр Категории задаётся как часть пути
      $url .= '/' . strtolower(transliteration_get($cat_info['title']));
      $title = $cat_info['title'];
      if ($cat_info['icon_num']) {
        $title_icon = '<i class="icon icon-' . $cat_info['icon_num'] . '"></i>';
      }
      if ($cat_info['banner']['uri']) {
        $banner_uri = $cat_info['banner']['uri'];
      }
    }
  }

  $parameters = drupal_get_query_parameters($query);
  unset($parameters['category']);
  if ($parameters) $url .= '?' . drupal_http_build_query($parameters);

  $setting['history']['url'] = $GLOBALS['base_url'] . $url;
  $commands[] = ajax_command_settings($setting);

  // изменить Заголовок страницы
  $commands[] = ajax_command_invoke('.banner-title', 'html', [$title_icon . $title]);

  // заменить баннер
  $commands[] = ajax_command_invoke('.page-banner .mobile', 'attr', ['srcset', image_style_url('banner_mobile', $banner_uri)]);
  $commands[] = ajax_command_invoke('.page-banner img', 'attr', ['src', file_create_url($banner_uri)]);

  return ['#type' => 'ajax', '#commands' => $commands];
}

/**
 * Вернуть массив с иконкой и названием категории
 */
function sec_catalog_get_category_info($cat_id)
{
  $arr = [];
  $category_wr = entity_metadata_wrapper('taxonomy_term', $cat_id);
  if ($category_wr->value()) {
    $arr['title'] = $category_wr->getIdentifier() == CAT_OTHER_TID ? t('Adjuvants and special purpose products') : $category_wr->label();
    $arr['icon_num'] = $category_wr->field_icon->value();
    $arr['banner']['uri'] = $category_wr->field_image_banner->value() ? $category_wr->field_image_banner->file->value()->uri : '';
  }

  return $arr;
}

/**
 * Вернуть массив возможных значений фильтров Каталога и выбранные значения
 */
function sec_catalog_get_filters_set()
{
  $key = drupal_hash_base64($_GET['q']);
  $filters = &drupal_static(__FUNCTION__ . $key);
  if (!isset($filters)) {

    $filters = [
      'category'   => ['current_id' => 0, 'options' => []],
      'component'  => ['current_id' => 0, 'options' => []],
      'culture'    => ['current_id' => 0, 'options' => []],
    ];

    // Категории
    $curr_cat_id = null;
    $categories = sec_catalog_get_categories();
    foreach ($categories as $cat) {
      $filters['category']['options'][$cat['id']] = $cat['label'];
    }
    if ($_GET['q'] == 'system/ajax' && isset($_POST["category"])) {
      $curr_cat_id = $_POST["category"];
    }
    elseif (arg(0) == 'katalog' && arg(1)) {
      $curr_cat_id = sec_catalog_get_category_id_by_name(arg(1));
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($categories[$curr_cat_id])) {
      $filters['category']['current_id'] = $curr_cat_id;
    }

    // Действующие вещества
    $curr_comp_id = null;
    $components = sec_catalog_get_filter_components($filters, 'product');
    foreach ($components as $cmp) {
      $filters['component']['options'][$cmp['id']] = $cmp['label'];
    }
    if ($_GET['q'] == 'system/ajax' && isset($_POST["component"])) {
      $curr_comp_id = $_POST["component"];
    }
    elseif (isset($_GET['component']) && is_numeric($_GET['component'])) {
      $curr_comp_id = $_GET['component'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($components[$curr_comp_id])) {
      $filters['component']['current_id'] = $curr_comp_id;
    }

    // Культуры
    $curr_cult_id = null;
    $cultures = sec_catalog_get_filter_cultures($filters);
    foreach ($cultures as $culture) {
      $filters['culture']['options'][$culture['id']] = $culture['label'];
    }
    if ($_GET['q'] == 'system/ajax' && isset($_POST["culture"])) {
      $curr_cult_id = $_POST["culture"];
    }
    elseif (isset($_GET['culture']) && is_numeric($_GET['culture'])) {
      $curr_cult_id = $_GET['culture'];
    }
    // проверить наличие заданного значения в списке фильтра
    if (!empty($cultures[$curr_cult_id])) {
      $filters['culture']['current_id'] = $curr_cult_id;
    }
  }

  return $filters;
}

function sec_catalog_get_products_filtered($filters)
{
  $catalog = [];

  $dbr = db_select('node', 'n');
  $dbr->condition('n.type', 'preparation');
  $dbr->orderBy('n.title');
  $dbr->condition('n.status', '1');
  if ($filters['category']['current_id']) {
    $dbr->innerJoin('field_data_field_prep_category', 'fpc', 'fpc.entity_id = n.nid');
    $dbr->condition('fpc.field_prep_category_tid', $filters['category']['current_id']);
  }
  if ($filters['component']['current_id']) {
    $dbr->innerJoin('field_data_field_prep_components', 'fpcoms', 'fpcoms.entity_id = n.nid');
    $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.entity_id = fpcoms.field_prep_components_value');
    $dbr->condition('fpcom.field_component_tid', $filters['component']['current_id']);
  }
  if ($filters['culture']['current_id']) {
    $dbr->innerJoin('field_data_field_prep_reglaments', 'fppr', 'fppr.entity_id = n.nid');
    $dbr->innerJoin('field_data_field_cultures', 'fc', 'fc.entity_id = fppr.field_prep_reglaments_value');
    $dbr->condition('fc.bundle', 'field_prep_reglaments');
    $dbr->condition('fc.field_cultures_target_id', $filters['culture']['current_id']);
  }

  $dbr->addField('n', 'nid');
  $dbr->distinct();
  if ($nodes = $dbr->execute()->fetchCol()) {

    foreach($nodes as $nid) {
      $product_info = sec_catalog_get_product_info($nid);
      if (empty($catalog[$product_info['category']['id']])) {
        $catalog[$product_info['category']['id']] = [
          'label' => $product_info['category']['label'],
          'products' => [],
        ];
      }
      $catalog[$product_info['category']['id']]['products'][] = $product_info;
    }
  }

  return $catalog;
}

/**
 * Вернуть массив препаратов с флагом Новинка
 */
function sec_catalog_get_new_products()
{
  $products = [];

  $dbr = db_select('node', 'n');
  $dbr->condition('n.type', 'preparation');
  $dbr->condition('n.status', 1);
  $dbr->innerJoin('field_data_field_prep_novelty', 'fpn', 'fpn.entity_id = n.nid');
  $dbr->condition('fpn.field_prep_novelty_value', 1);
  $dbr->addField('n', 'nid');
  $dbr->orderRandom();
  if ($nodes = $dbr->execute()->fetchCol()) {

    foreach($nodes as $nid) {
      $products[] = sec_catalog_get_product_info($nid);
    }
  }

  return $products;
}

/**
 * Вернуть массив с рекомендуемыми препаратами
 * todo, пока выводит случайные 6
 */
function sec_catalog_get_recommended_products()
{
  $products = [];

  $dbr = db_select('node', 'n');
  $dbr->condition('n.type', 'preparation');
  $dbr->condition('n.status', 1);
  $dbr->addField('n', 'nid');
  $dbr->range(0, 5);
  $dbr->orderRandom();
  if ($nodes = $dbr->execute()->fetchCol()) {

    foreach($nodes as $nid) {
      $products[] = sec_catalog_get_product_info($nid);
    }
  }

  return $products;
}

/**
 * Вернуть массив с информацией о препарате
 */
function sec_catalog_get_product_info($node)
{
  $key = $node->nid ?? $node;
  $product = &drupal_static(__FUNCTION__ . serialize($key));

  if (empty($product)) {
    $product = [];
    $node_wr = entity_metadata_wrapper('node', $node);
    if ($node_wr->value()) {
      $product['id'] = $node_wr->getIdentifier();
      $product['title'] = trim($node_wr->label());
      $product['novelty'] = $node_wr->field_prep_novelty->value();
      $trademark = $node_wr->field_prep_trademark->value() ? '<span class="tm">®</span>' : '';
      // наименование для вывода (с формуляцией, например)
      if (strpos($product['title'], ' ') !== false) {
        $product['label'] = preg_replace('/^((?:Солонайт)|(?:АгроМинерал)|(?:Гранберг)|(?:Октапон)|(?:Грандсил)|(?:Бетаниум)|(?:Глифор))((?:\s.*?))$/', '$1' . $trademark . '$2', $product['title']);
      } else {
        $product['label'] = $product['title'] . $trademark;
      }
      $image_uri = 'public://images/default/no_image.png';
      if ($node_wr->field_image->value()) {
        $image_uri = $node_wr->field_image->file->value()->uri;
      }
      $product['image'] = [
        'teaser' => image_style_url('card_product', $image_uri),
        'full' => file_create_url($image_uri),
      ];

      // категория
      $product['category'] = [
        'id' => $node_wr->field_prep_category->getIdentifier(),
        'label' => $node_wr->field_prep_category->label(),
        'icon_num' => $node_wr->field_prep_category->field_icon->value(),
      ];

      // единицы измерения
      $unit_short = '';
      if ($node_wr->field_prep_tare->value()) {
        $unit_short = $node_wr->field_prep_tare->field_measure_unit->value();
      }
      $unit_apply = $product['category']['id'] == CAT_SEED_TID ? t('t') : t('ha');
      $product['units'] = [
        'short' => $unit_short,
        'apply' => $unit_apply,
      ];

      $list = $list2 = [];
      foreach ($node_wr->field_prep_components->getIterator() as $component_wr) {
        $name = $component_wr->field_component->label();
        $conc = $component_wr->field_concentration->value();
        $list[] = [
          'label' => $name,
          'concentration' => $conc,
        ];
        $conc_formatted = empty($conc) ? '' : helper_number_format($conc, 2);
        $wrap = strlen($name) > 32;
        $suffix = $conc_formatted ? ',&nbsp;' . $conc_formatted . '&nbsp;<span class="nowrap">' . t('g') . '/' . $unit_short . '</span>' : '';
        $list2[] = '<span class="' . ($wrap ? '' : 'nowrap') . '">' . $name . $suffix . '</span>';
      }
      $product['components'] = [
        'list' => $list,
        'formatted' => implode(' + ', $list2),
      ];

      $product['formulation'] = [
        'short' => $node_wr->field_prep_formulation->value() ? $node_wr->field_prep_formulation->field_acronym->value() : '',
        'full' => $node_wr->field_prep_formulation->label(),
      ];
      $product['path'] = '/' . drupal_get_path_alias('node/' . $node_wr->getIdentifier());

      $product['summary'] = $node_wr->field_prep_summary->value();

      $product['advantages'] = [];
      foreach ($node_wr->field_prep_advantages->getIterator() as $adv_wr) {
        $product['advantages'][] = [
          'icon_num' => $adv_wr->field_icon->value(),
          'text' => $adv_wr->field_text->value(),
        ];
      }

      $product['specs'] = [];
      $product['specs'][] = [
        'icon_num' => $node_wr->field_prep_category->field_icon->value(),
        'text' => $node_wr->field_prep_category->label(),
      ];
      $product['specs'][] = [
        'icon_num' => '058',
        'text' => $node_wr->field_prep_tare->label(),
      ];
      if ($product['components']['formatted']) {
        $product['specs'][] = [
          'icon_num' => '052',
          'text' => $product['components']['formatted'],
        ];
      }
      $product['specs'][] = [
        'icon_num' => '053',
        'text' => $node_wr->field_prep_formulation->label(),
      ];

      $product['how_it_works_banner'] = $node_wr->field_prep_how_it_works_banner->value() ? $node_wr->field_prep_how_it_works_banner->file->url->value() : '';
      $product['how_it_works'] = [];
      foreach ($node_wr->field_prep_how_it_works->getIterator() as $how_wr) {
        $product['how_it_works'][] = [
          'icon_num' => $how_wr->field_icon->value(),
          'text' => $how_wr->field_textarea->value(),
        ];
      }

      $product['instructions'] = [];
      foreach ($node_wr->field_prep_instructions->getIterator() as $instr_wr) {
        $product['instructions'][] = [
          'title' => $instr_wr->field_prep_instruction_title->label(),
          'icon_num' => $instr_wr->field_prep_instruction_title->field_icon->value(),
          'text' => $instr_wr->field_textarea->value() ? $instr_wr->field_textarea->value->value() : '',
        ];
      }

    }
  }

  return $product;
}

/**
 * Вернуть массив данных Регламентов препарата
 */
function sec_catalog_get_product_reglaments_info($product_id)
{
  $regs = [];

  $product_wr = entity_metadata_wrapper('node', $product_id);
  $product_info = sec_catalog_get_product_info($product_id);

  // данные
  foreach ($product_wr->field_prep_reglaments->getIterator() as $regl_wr) {
    $icon_num = '';
    $cultures = [];
    foreach ($regl_wr->field_cultures->getIterator() as $culture_wr) {
      $cultures[$culture_wr->getIdentifier()] = $culture_wr->label();
      // определить иконку регламента из класса культуры
      if (!$icon_num) $icon_num = sec_catalog_get_culture_class_icon($culture_wr->getIdentifier());
    }
    $cultures_note = $regl_wr->field_cultures_note->value();

    // иконка для "некультурных" регламентов
    if (!$icon_num) {
      $icon_num = $product_info['category']['icon_num'];
    }

    $weed_groups = [];
    foreach ($regl_wr->field_reg_weed_groups->getIterator() as $weed_group_wr) {
      $lifes = [];
      foreach ($weed_group_wr->field_reg_weed_lifes->getIterator() as $weed_life_wr) $lifes[$weed_life_wr->value()] = $weed_life_wr->label();
      $classes = [];
      foreach ($weed_group_wr->field_reg_weed_classes->getIterator() as $weed_class_wr) $classes[$weed_class_wr->getIdentifier()] = $weed_class_wr->label();

      $weed_groups[] = [
        'lifes' => $lifes,
        'classes' => $classes,
      ];
    }

    $pest_classes = [];
    foreach ($regl_wr->field_reg_pest_classes->getIterator() as $pest_class_wr) $pest_classes[$pest_class_wr->getIdentifier()] = $pest_class_wr->label();

    $hobjects = [];
    foreach ($regl_wr->field_hobjects->getIterator() as $hobject_wr) {
      $hobjects[$hobject_wr->getIdentifier()] = [
        'type' => $hobject_wr->type->value(),
        'name' => $hobject_wr->label(),
      ];
    }
    $hobjects_note = $regl_wr->field_hobjects_note->value();

    // иначе вывести "Десикация"
    if (!$weed_groups && !$pest_classes && !$hobjects && $product_info['category']['id'] == CAT_DESIC_TID) {
      $pest_classes[] = t('Desiccation');
    }

    $prep_spends = [];
    foreach ($regl_wr->field_reg_prep_spends->getIterator() as $prep_spend_wr) {
      $prep_spends[] = $prep_spend_wr->value();
    }

    $mix_spend = $regl_wr->field_reg_mix_spend->value();
    $ratio = $regl_wr->field_reg_ratio->value();
    $wait = $regl_wr->field_reg_wait->value();


    // форматирование
    if ($cultures) {
      $cultures_f = implode(', ', array_values($cultures));
      if ($cultures_note) $cultures_f .= ' (' . $cultures_note . ')';
    } else {
      $cultures_f = $cultures_note;
    }
    $cultures_f = drupal_ucfirst(drupal_strtolower($cultures_f));

    $hobjects_arr = [];
    if ($weed_groups) {
      foreach ($weed_groups as $wg) {
        $hobjects_arr[] = ($wg['lifes'] ? implode(', ', $wg['lifes']) . ' ' : '') . implode(', ', $wg['classes']);
      }
    }
    if ($pest_classes) {
      $hobjects_arr[] = implode(', ', $pest_classes);
    }
    if ($hobjects) {
      foreach ($hobjects as $hi => $ho) {
        $hobjects_arr[] = l($ho['name'], drupal_get_path_alias('node/' . $hi));
      }
    }
    if ($hobjects_arr) {
      $hobjects_f = implode(', ', array_values($hobjects_arr));
      if ($hobjects_note) $hobjects_f .= ' (' . $hobjects_note . ')';
    } else {
      $hobjects_f = $hobjects_note;
    }
    $hobjects_f = drupal_ucfirst(drupal_strtolower($hobjects_f));

    $prep_spends_f = '';
    foreach ($prep_spends as $ps) {
      $ps['from'] = helper_number_format($ps['from'], 2);
      $ps['to']   = helper_number_format($ps['to'], 2);
      $psj = $ps['from'] == $ps['to'] ? $ps['to'] : $ps['from'] . '-' . $ps['to'];
      $prep_spends_f .= $prep_spends_f ? ' + ' . $psj : $psj;
    }
    $prep_spends_f .= ' ' . $product_info['units']['short'] . '/' . $product_info['units']['apply'];

    $mix_spend_f = $mix_spend['from'] == $mix_spend['to'] ? $mix_spend['to'] : ($mix_spend['from'] . '-' . $mix_spend['to']);

    $regs[$regl_wr->getIdentifier()] = [
      'icon_num' => $icon_num,
      'cultures' => [
        'list' => $cultures,
        'note' => $cultures_note,
        'formatted' => $cultures_f,
      ],
      'hobjects' => [
        'weed_groups' => $weed_groups,
        'pest_classes' => $pest_classes,
        'list' => $hobjects,
        'note' => $hobjects_note,
        'formatted' => $hobjects_f,
      ],
      'prep_spends' => [
        'list' => $prep_spends,
        'formatted' => $prep_spends_f,
      ],
      'mix_spend' => [
        'raw' => $mix_spend,
        'formatted' => $mix_spend_f . ' л/' . $product_info['units']['apply'],
      ],
      'wait' => [
        'raw' => $wait,
        'formatted' => is_numeric($wait) ? format_plural($wait, '@count day', '@count days') : $wait,
      ],
      'ratio' => [
        'raw' => $ratio,
        'formatted' => ($ratio['from'] == $ratio['to'] ? $ratio['to'] : $ratio['from'] . '-' . $ratio['to']),
      ],
      'description' => $regl_wr->field_reg_description->value(),
    ];
  }

  return $regs;
}

/**
 * Вернуть массив с Категориями
 */
function sec_catalog_get_categories()
{
  $categories = [];
  if ($terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('preparation_categories')->vid, 0, null, true)) {
    foreach($terms as $term) {
      $term_info = helper_get_term_info($term);
      $categories[$term->tid] = $term_info;
      $categories[$term->tid]['path'] = sec_catalog_taxonomy_term_uri($term)['path'];
    }
  }

  return $categories;
}

/**
 * Вернуть массив ДВ с учётом заданной фильтрации
 * @param $filter
 *  all - все из справочника
 *  product - из продукции
 */
function sec_catalog_get_filter_components($filters, $filter = 'all')
{
  $components = [];

  $dbr = db_select('taxonomy_term_data', 't');
  $dbr->condition('t.vid', taxonomy_vocabulary_machine_name_load('preparation_components')->vid);

  // если задана категория
  if ($filters['category']['current_id']) {
    $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.field_component_tid = t.tid');
    $dbr->innerJoin('field_data_field_prep_components', 'fpcoms', 'fpcoms.field_prep_components_value = fpcom.entity_id');
    $dbr->innerJoin('node', 'n', 'n.nid = fpcoms.entity_id');
    $dbr->innerJoin('field_data_field_prep_category', 'fpc', 'fpc.entity_id = n.nid');
    $dbr->condition('fpc.field_prep_category_tid', $filters['category']['current_id']);
  }

  if ($filter == 'product') {
    $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.field_component_tid = t.tid');
  }
  $dbr->orderBy('t.name');
  $dbr->addField('t', 'tid');
  if ($tids = $dbr->execute()->fetchCol()) {
    if ($terms = taxonomy_term_load_multiple($tids)) {
      foreach($terms as $term) {
        $components[$term->tid] = [
          'id' => $term->tid,
          'label' => $term->name,
          'path' => drupal_get_path_alias('taxonomy/term/' . $term->tid),
        ];
      }
    }
  }

  return $components;
}

/**
 * Вернуть массив культур с учётом заданной фильтрации
 * @param $filter
 *  all - все из справочника
 *  product - из продукции
 */
function sec_catalog_get_filter_cultures($filters)
{
  $cultures = [];

  $dbr = db_select('node', 'n');
  $dbr->condition('n.type', 'culture');

  // присутствующие в регламентах
  $dbr->innerJoin('field_data_field_cultures', 'fc', 'fc.field_cultures_target_id = n.nid');
  $dbr->condition('fc.bundle', 'field_prep_reglaments');
  $dbr->innerJoin('field_data_field_prep_reglaments', 'fppr', 'fppr.field_prep_reglaments_value = fc.entity_id');
  $dbr->innerJoin('node', 'np', 'np.nid = fppr.entity_id');
  $dbr->condition('np.type', 'preparation');

  // если задана категория
  if ($filters['category']['current_id']) {
    $dbr->innerJoin('field_data_field_prep_category', 'fpc', 'fpc.entity_id = np.nid');
    $dbr->condition('fpc.field_prep_category_tid', $filters['category']['current_id']);
  }

  // если задано ДВ
  if ($filters['component']['current_id']) {
    $dbr->innerJoin('field_data_field_prep_components', 'fpcoms', 'fpcoms.entity_id = np.nid');
    $dbr->innerJoin('field_data_field_component', 'fpcom', 'fpcom.entity_id = fpcoms.field_prep_components_value');
    $dbr->condition('fpcom.field_component_tid', $filters['component']['current_id']);
  }

  $dbr->orderBy('n.title');
  $dbr->fields('n', ['nid', 'title']);
  if ($results = $dbr->execute()->fetchAll()) {
      foreach($results as $result) {
        $cultures[$result->nid] = [
          'id' => $result->nid,
          'label' => $result->title,
          'path' => drupal_get_path_alias('node/' . $result->nid),
        ];
      }
  }

  return $cultures;
}

/**
 * Вернуть id термина категории по имени
 * @param $name - оригинальный или translit
 *
 * @return $tid категории
 */
function sec_catalog_get_category_id_by_name($name)
{
  $vid = taxonomy_vocabulary_machine_name_load('preparation_categories')->vid;
  $terms = taxonomy_get_tree($vid);

  $name = strtolower($name);
  foreach ($terms as $term) {
    if ($name == strtolower($term->name) || $name == strtolower(transliteration_get($term->name))) return $term->tid;
  }

  return null;
}

function sec_catalog_entity_info_alter(&$entity_info)
{
  // изменить функцию формирования пути для Таксономии
  // чтобы ссылка вела не на стандартную страницу вывода терминов,
  // а на кастомную
  $entity_info['taxonomy_term']['uri callback'] = 'sec_catalog_taxonomy_term_uri';
}
function sec_catalog_taxonomy_term_uri($term)
{
  switch ($term->vocabulary_machine_name) {
    // для словаря Категорий изменить путь на свою страницу Каталога
    case 'preparation_categories':
      return array(
        'path' => 'katalog/' . strtolower(transliteration_get($term->name)),
      );
  }

  // default taxonomy term uri
  return taxonomy_term_uri($term);
}

/**
 * Вернуть иконку класса для заданной культуры.
 * Проверяет всю иерархию классов снизу вверх и возвращает первую
 */
function sec_catalog_get_culture_class_icon($culture_id)
{
  $icon_num = '';
  $culture_wr = entity_metadata_wrapper('node', $culture_id);
  if ($culture_wr->field_classificator_flora->value()) {
    if ($parents = taxonomy_get_parents_all($culture_wr->field_classificator_flora->getIdentifier())) {
      foreach ($parents as $parent) {
        if (!empty($parent->field_icon["und"][0]["value"])) {
          $icon_num = $parent->field_icon["und"][0]["value"];
          break;
        }
      }
    }
  }

  return $icon_num;
}

